<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RiKa0-0</title>
  
  <subtitle>RiKa0-0</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yan_han_guang.gitee.io/"/>
  <updated>2020-05-27T03:02:14.268Z</updated>
  <id>http://yan_han_guang.gitee.io/</id>
  
  <author>
    <name>寒光君</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>yblog（三）</title>
    <link href="http://yan_han_guang.gitee.io/2020/05/26/03yblog%E4%B8%89/"/>
    <id>http://yan_han_guang.gitee.io/2020/05/26/03yblog%E4%B8%89/</id>
    <published>2020-05-26T06:55:39.000Z</published>
    <updated>2020-05-27T03:02:14.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阶段三"><a href="#阶段三" class="headerlink" title="阶段三"></a>阶段三</h1><h2 id="用代码编辑器创建所需的所有东西"><a href="#用代码编辑器创建所需的所有东西" class="headerlink" title="用代码编辑器创建所需的所有东西"></a>用代码编辑器创建所需的所有东西</h2><pre class=" language-bash"><code class="language-bash">// 5、策略配置        StrategyConfig strategy <span class="token operator">=</span> new StrategyConfig<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy.setInclude<span class="token punctuation">(</span><span class="token string">"about"</span>,<span class="token string">"collection"</span>,<span class="token string">"comment"</span>,<span class="token string">"link"</span>,<span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy.setNaming<span class="token punctuation">(</span>NamingStrategy.underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="分类模块编写"><a href="#分类模块编写" class="headerlink" title="分类模块编写"></a>分类模块编写</h2><ul><li>想解决一个路径匹配不了的问题，在前面我们在pom文件中已经写了build的东西，那么接下来还要补充一个东西才能够自定义mapper生效。</li></ul><pre class=" language-java"><code class="language-java">#配置mapper xml文件的路径mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>mapper<span class="token operator">-</span>locations<span class="token operator">=</span>classpath<span class="token operator">:</span>com<span class="token operator">/</span>yhg<span class="token operator">/</span>mainservice<span class="token operator">/</span>mapper<span class="token operator">/</span>xml<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>xml</code></pre><p>不然会出现绑定不了数据的情况。！<br>就会出现这个问题：</p><pre class=" language-java"><code class="language-java">Invalid bound <span class="token function">statement</span> <span class="token punctuation">(</span>not found<span class="token punctuation">)</span><span class="token operator">:</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>TypeMapper<span class="token punctuation">.</span>getByName</code></pre><p>controller：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Type type<span class="token punctuation">)</span><span class="token punctuation">{</span>        typeService<span class="token punctuation">.</span><span class="token function">saveType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>1、在impl中如果正常写个方法是这样子的，</p><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> TypeMapper typeMapper<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加分类</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveType</span><span class="token punctuation">(</span>Type type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//查询分类是否存在</span>        Type t <span class="token operator">=</span> typeMapper<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">YHGException</span><span class="token punctuation">(</span><span class="token number">20001</span><span class="token punctuation">,</span><span class="token string">"该分类已存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            typeMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>mapper：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//添加分类</span>    Type <span class="token function">getByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"typeName"</span><span class="token punctuation">)</span> String typeName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>xml：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>查询分类<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"getByName"</span> resultType<span class="token operator">=</span><span class="token string">"com.yhg.mainservice.entity.Type"</span><span class="token operator">></span>        select <span class="token operator">*</span> from type where type_name <span class="token operator">=</span> #<span class="token punctuation">{</span>typeName<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre><p>法二：使用baseMapper<br>mapper：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//添加分类</span>    <span class="token keyword">public</span> Type <span class="token function">getByName</span><span class="token punctuation">(</span>String typeName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>xml：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>查询分类<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"getByName"</span> resultType<span class="token operator">=</span><span class="token string">"com.yhg.mainservice.entity.Type"</span><span class="token operator">></span>        select <span class="token operator">*</span> from type where type_name <span class="token operator">=</span> #<span class="token punctuation">{</span>typeName<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre><p>impl：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//添加分类</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveType</span><span class="token punctuation">(</span>Type type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//查询分类是否存在</span>        Type t <span class="token operator">=</span> baseMapper<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">YHGException</span><span class="token punctuation">(</span><span class="token number">20001</span><span class="token punctuation">,</span><span class="token string">"该分类已存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            baseMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>typeController：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>commonutils<span class="token punctuation">.</span>R<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Type<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>service<span class="token punctuation">.</span>TypeService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * &lt;p> * 帖子类型表 前端控制器 * &lt;/p> * * @author 雨落弦鸣 * @since 2020-05-25 */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/mainservice/type"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TypeController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> TypeService typeService<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加分类</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Type type<span class="token punctuation">)</span><span class="token punctuation">{</span>        typeService<span class="token punctuation">.</span><span class="token function">saveType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//后台查询分类列表</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"findAll"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        typeService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//前台查询分类列表</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"findFront"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">findFront</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Type<span class="token operator">></span> list <span class="token operator">=</span> typeService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span>Type<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ne</span><span class="token punctuation">(</span><span class="token string">"is_deleted"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"type_id"</span><span class="token punctuation">,</span> <span class="token string">"type_name"</span><span class="token punctuation">,</span> <span class="token string">"type_blog_count"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"items"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//更新分类</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Type type<span class="token punctuation">)</span><span class="token punctuation">{</span>        typeService<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"更新成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据id启用或者弃用</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"enable/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">enable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String id<span class="token punctuation">)</span><span class="token punctuation">{</span>        typeService<span class="token punctuation">.</span><span class="token function">enableById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"更改成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据id删除分类</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"{typeId}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String typeId<span class="token punctuation">)</span><span class="token punctuation">{</span>        typeService<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>typeId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Typeimpl：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Type<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>TypeMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>service<span class="token punctuation">.</span>TypeService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>ServiceImpl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>servicebase<span class="token punctuation">.</span>exceptionhandler<span class="token punctuation">.</span>YHGException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * &lt;p> * 帖子类型表 服务实现类 * &lt;/p> * * @author 雨落弦鸣 * @since 2020-05-25 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TypeServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token operator">&lt;</span>TypeMapper<span class="token punctuation">,</span> Type<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">TypeService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//添加分类</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveType</span><span class="token punctuation">(</span>Type type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1、判断表里是否有同名</span>        <span class="token comment" spellcheck="true">//取出数据</span>        Type t <span class="token operator">=</span> baseMapper<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">YHGException</span><span class="token punctuation">(</span><span class="token number">20001</span><span class="token punctuation">,</span><span class="token string">"该分类已存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//插入数据</span>            baseMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//根据id启用或者弃用</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enableById</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Type type <span class="token operator">=</span> baseMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            type<span class="token punctuation">.</span><span class="token function">setEnable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            baseMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            type<span class="token punctuation">.</span><span class="token function">setEnable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            baseMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>mpConfig：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>injector<span class="token punctuation">.</span>ISqlInjector<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>injector<span class="token punctuation">.</span>LogicSqlInjector<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>OptimisticLockerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>PaginationInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MapperScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.yhg.mainservice.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 逻辑删除插件     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ISqlInjector <span class="token function">sqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LogicSqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 分页插件     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 乐观锁插件     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> OptimisticLockerInterceptor <span class="token function">optimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Linkentity：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"创建时间"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"2019-01-01 8:00:00"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date gmtCreate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"更新时间"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"2019-01-01 8:00:00"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span>    <span class="token keyword">private</span> Date gmtModified<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"乐观锁"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Version</span>    <span class="token keyword">private</span> Integer version<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"逻辑删除 1（true）已删除， 0（false）未删除"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableLogic</span>    <span class="token keyword">private</span> Boolean isDeleted<span class="token punctuation">;</span></code></pre><p>自定义实现类 MyMetaObjectHandler：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>servicebase<span class="token punctuation">.</span>handler<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>MetaObjectHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>MetaObject<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//属性名称，不是字段名称</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"gmtCreate"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"gmtModified"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"gmtModified"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>LinkControntllar：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>pagination<span class="token punctuation">.</span>Page<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>commonutils<span class="token punctuation">.</span>R<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Link<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>LinkQuery<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>service<span class="token punctuation">.</span>LinkService<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Api<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiOperation<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiParam<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * &lt;p> * 友情链接表 前端控制器 * &lt;/p> * * @author 雨落弦鸣 * @since 2020-05-25 */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/mainservice/link"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"友链管理"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> LinkService linkService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保存友链</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Link link<span class="token punctuation">)</span><span class="token punctuation">{</span>        linkService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"添加成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//更新友链</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Link link<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> linkService<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据id获取</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"所有友链列表"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"getLink/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">getLink</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"友链ID"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PathVariable</span> String id<span class="token punctuation">)</span><span class="token punctuation">{</span>        Link link <span class="token operator">=</span> linkService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"lists"</span><span class="token punctuation">,</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//逻辑删除友链的方法</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">removeLink</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> linkService<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//分页查询友链的方法</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"pageLink/{current}/{limit}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">pageListLink</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> current<span class="token punctuation">,</span>                          <span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> limit<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建page对象</span>        Page<span class="token operator">&lt;</span>Link<span class="token operator">></span> pageLink <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法实现分类</span>        <span class="token comment" spellcheck="true">//调用方法的时候，底层封装，把分页所有数据封装到pageLink对象里面</span>        linkService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>pageLink<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> total <span class="token operator">=</span> pageLink<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总记录数量</span>        List<span class="token operator">&lt;</span>Link<span class="token operator">></span> records <span class="token operator">=</span> pageLink<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span>total<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"rows"</span><span class="token punctuation">,</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//条件查询带分页的方法</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"pageLinkCondition/{current}/{limit}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">pageLinkCondition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> current<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> limit<span class="token punctuation">,</span>                               <span class="token annotation punctuation">@RequestBody</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> LinkQuery linkQuery<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建page对象</span>        Page<span class="token operator">&lt;</span>Link<span class="token operator">></span> pageLink <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构建条件</span>        QueryWrapper<span class="token operator">&lt;</span>Link<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//多条件组合查询</span>        <span class="token comment" spellcheck="true">//mybatis 动态sql</span>        <span class="token comment" spellcheck="true">//判断条件值是否为空，如果不为空拼接条件</span>        String linkName <span class="token operator">=</span> linkQuery<span class="token punctuation">.</span><span class="token function">getLinkName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String begin <span class="token operator">=</span> linkQuery<span class="token punctuation">.</span><span class="token function">getBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String end <span class="token operator">=</span> linkQuery<span class="token punctuation">.</span><span class="token function">getEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>linkName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            wrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"link_name"</span><span class="token punctuation">,</span>linkName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>begin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            wrapper<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"gmt_create"</span><span class="token punctuation">,</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            wrapper<span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span><span class="token string">"gmt_create"</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//排序</span>        wrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"gmt_create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//wrapper</span>        <span class="token comment" spellcheck="true">//调用方法实现条件查询分页</span>        linkService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>pageLink<span class="token punctuation">,</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> total <span class="token operator">=</span> pageLink<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总记录数</span>        List<span class="token operator">&lt;</span>Link<span class="token operator">></span> records <span class="token operator">=</span> pageLink<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据list集合</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span>total<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"rows"</span><span class="token punctuation">,</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//</span><span class="token punctuation">}</span></code></pre><p>LInkQuery：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>vo<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiModelProperty<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkQuery</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"名称"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String linkName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"查询开始时间"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"2019-01-01 10:10:10"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String begin<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意，这里使用的是String类型，前端传过来的数据无需进行类型转换</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"查询结束时间"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"2019-12-01 10:10:10"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String end<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>BlogVo：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>vo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>FieldFill<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>IdType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>TableField<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>TableId<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Type<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiModelProperty<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogVo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"帖子id"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"blog_id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>ID_WORKER_STR<span class="token punctuation">)</span>    <span class="token keyword">private</span> String blogId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"标题"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String blogTitle<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"封面"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String blogImage<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"帖子内容"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String blogContent<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"点赞数"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer blogGoods<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"阅读数"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer blogRead<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"收藏数"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer blogCollection<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"博客分类"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Type type<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"简介"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String blogRemark<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"评论数"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer blogComment<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"创建时间"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"2019-01-01 8:00:00"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date gmtCreate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"更新时间"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"2019-01-01 8:00:00"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span>    <span class="token keyword">private</span> Date gmtModified<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>BlogServiceImpl：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Blog<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Type<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>BlogVo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>BlogMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>TypeMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>mainservice<span class="token punctuation">.</span>service<span class="token punctuation">.</span>BlogService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>ServiceImpl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yhg<span class="token punctuation">.</span>servicebase<span class="token punctuation">.</span>exceptionhandler<span class="token punctuation">.</span>YHGException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>BeanUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Transactional<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ExceptionHandler<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * &lt;p> * 博客表 服务实现类 * &lt;/p> * * @author 雨落弦鸣 * @since 2020-05-20 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token operator">&lt;</span>BlogMapper<span class="token punctuation">,</span> Blog<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">BlogService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> TypeMapper typeMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> YHGException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> BlogVo <span class="token function">readById</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Blog blog <span class="token operator">=</span> baseMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//没阅读查询一次，需要更新阅读数量</span>        blog<span class="token punctuation">.</span><span class="token function">setBlogRead</span><span class="token punctuation">(</span>blog<span class="token punctuation">.</span><span class="token function">getBlogRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        baseMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将blog转为blogVo</span>        BlogVo blogVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlogVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>blog<span class="token punctuation">,</span>blogVo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查询分类</span>        Type type <span class="token operator">=</span> typeMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>blog<span class="token punctuation">.</span><span class="token function">getBlogType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blogVo<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> blogVo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;阶段三&quot;&gt;&lt;a href=&quot;#阶段三&quot; class=&quot;headerlink&quot; title=&quot;阶段三&quot;&gt;&lt;/a&gt;阶段三&lt;/h1&gt;&lt;h2 id=&quot;用代码编辑器创建所需的所有东西&quot;&gt;&lt;a href=&quot;#用代码编辑器创建所需的所有东西&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
      <category term="yblog" scheme="http://yan_han_guang.gitee.io/tags/yblog/"/>
    
      <category term="SpringBoot" scheme="http://yan_han_guang.gitee.io/tags/SpringBoot/"/>
    
      <category term="SpringCloud" scheme="http://yan_han_guang.gitee.io/tags/SpringCloud/"/>
    
      <category term="vue" scheme="http://yan_han_guang.gitee.io/tags/vue/"/>
    
      <category term="mybatis plus" scheme="http://yan_han_guang.gitee.io/tags/mybatis-plus/"/>
    
      <category term="前后端分离" scheme="http://yan_han_guang.gitee.io/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>yblog（一）</title>
    <link href="http://yan_han_guang.gitee.io/2020/05/20/01%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8/"/>
    <id>http://yan_han_guang.gitee.io/2020/05/20/01%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8/</id>
    <published>2020-05-20T06:55:39.000Z</published>
    <updated>2020-05-30T04:18:09.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yblog项目启动"><a href="#yblog项目启动" class="headerlink" title="yblog项目启动"></a>yblog项目启动</h1><blockquote><p>摘要：</p><p>1、本次给大家带来的是SpringBoot+SpringCloud+Vue前后端分离开发的分布式、微服务、博客项目，致力于使广大网友尽可能通过这一个项目学到尽可能多的知识，使用当下最流行的技术以及第三方框架组件。</p><p>2、其次也是因为目前在B站上没有看到用于前后端开发博客的视频教程，故希望通过我的抛转，引来更多up主录制优质的此项目视频。</p><p>3、本up主大家可以叫我“寒光菌”，笔名“雨落弦鸣”、“凌月青缃”，计算机专业，其他副业略……因为各种因素我的此系列视频更新进度会受到影响，我也不是什么大神，能力也不会高你们多少，出错遇到困难在所难免，况且此项目我先前从未做过，没有准备，只是临时开录开写。</p><p>​        唯一能保证的是在有生之年我可以将视频更新完，所以在此我希望广大网友学习之余能够多多交流，尽量以免费开源的方式分享所学。</p><p>​        如果实在不济我因工作因素停更了一段时间，部分热心网友可以通过我的工作QQ号进行联系，替我录制后段视频，经我审核后署名上传以加快项目进度（希望不会有这天）/哈哈哈哈。</p></blockquote><h2 id="开发工具："><a href="#开发工具：" class="headerlink" title="开发工具："></a>开发工具：</h2><p>IDEA2018.02</p><p>MySql可视化工具：Navicat或者SQLyog</p><p>redis</p><p>VScode</p><p>后期会加入Monogo、Linux</p><h2 id="代码、笔记上传地址"><a href="#代码、笔记上传地址" class="headerlink" title="代码、笔记上传地址"></a>代码、笔记上传地址</h2><p>B站搜索用户：雨落弦鸣</p><p><a href="https://www.bilibili.com/video/av498208129" target="_blank" rel="noopener">B站视频链接：</a></p><p><a href="https://rika0-0.github.io/">个人网站（因为域名好听舍不得换到码云所以依旧在速度较慢的github上部署）</a></p><p><a href="https://gitee.com/yan_han_guang/y-blog.git" target="_blank" rel="noopener">码云</a></p><p>百度云：</p><p>链接：<a href="https://pan.baidu.com/s/1R1_tsG4dNv_mJX1Y4-QheQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1R1_tsG4dNv_mJX1Y4-QheQ</a> </p><p>提取码：muvr </p><p>链接失效请联系我！</p><h2 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h2><ol><li>坚决不收费，本视频可转载，转载前提——不可变相收费！</li><li>第一阶段（环境搭建）这一块的笔记因为内容太多，我将我其他项目的部分笔记拿来充当此项目的第一阶段使用，毕竟很多东西是一样的，请务必看视频听取说明进行环境搭建，以及文档的使用。</li><li>还有，部分同学如果使用的是eclipse或者SqlServer的话其实也可以尝试跟着我的视频进行学习，原理一样，操作变通即可。</li><li>最后希望大家有问题尽量不要私聊我，因为我会因此处在大量回复网友消息的时间里少了自己的学习、工作时间，推荐大家在评论区、弹幕区发出自己的问题，然后集结广大网友的智慧去解决问题，这样比我一个个帮你们解决问题来的更高效/加油哟~</li></ol><h2 id="常见问题及解决方案"><a href="#常见问题及解决方案" class="headerlink" title="常见问题及解决方案"></a>常见问题及解决方案</h2><p>updating……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;yblog项目启动&quot;&gt;&lt;a href=&quot;#yblog项目启动&quot; class=&quot;headerlink&quot; title=&quot;yblog项目启动&quot;&gt;&lt;/a&gt;yblog项目启动&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;摘要：&lt;/p&gt;
&lt;p&gt;1、本次给大家带来的是SpringB
      
    
    </summary>
    
    
    
      <category term="yblog" scheme="http://yan_han_guang.gitee.io/tags/yblog/"/>
    
      <category term="SpringBoot" scheme="http://yan_han_guang.gitee.io/tags/SpringBoot/"/>
    
      <category term="SpringCloud" scheme="http://yan_han_guang.gitee.io/tags/SpringCloud/"/>
    
      <category term="vue" scheme="http://yan_han_guang.gitee.io/tags/vue/"/>
    
      <category term="mybatis plus" scheme="http://yan_han_guang.gitee.io/tags/mybatis-plus/"/>
    
      <category term="前后端分离" scheme="http://yan_han_guang.gitee.io/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>yblog（二）</title>
    <link href="http://yan_han_guang.gitee.io/2020/05/20/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AEupdating/"/>
    <id>http://yan_han_guang.gitee.io/2020/05/20/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AEupdating/</id>
    <published>2020-05-20T06:55:39.000Z</published>
    <updated>2020-05-30T04:16:16.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yblog"><a href="#yblog" class="headerlink" title="yblog"></a>yblog</h1><blockquote><p>基于SpringBoot和Vue的前后端分离项目  </p></blockquote><h1 id="day01-Mybatis-Plus入门"><a href="#day01-Mybatis-Plus入门" class="headerlink" title="day01 Mybatis Plus入门"></a>day01 Mybatis Plus入门</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>官网：<a href="http://mp.baomidou.com/" target="_blank" rel="noopener">http://mp.baomidou.com/</a><br>参考教程：<a href="http://mp.baomidou.com/guide/" target="_blank" rel="noopener">http://mp.baomidou.com/guide/</a><br>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><h2 id="二、入门"><a href="#二、入门" class="headerlink" title="二、入门"></a>二、入门</h2><p>看官方文档可以进行学习，此处只写需要注意的几点。</p><h3 id="一-、引入依赖"><a href="#一-、引入依赖" class="headerlink" title="一 、引入依赖"></a>一 、引入依赖</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span>exclusions<span class="token operator">></span>                <span class="token operator">&lt;</span>exclusion<span class="token operator">></span>                    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>vintage<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>junit<span class="token operator">-</span>vintage<span class="token operator">-</span>engine<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>exclusion<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>exclusions<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mybatis<span class="token operator">-</span>plus<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.3</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mysql<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>lombok用来简化实体类<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>sql 分析打印<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>p6spy<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>p6spy<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.8</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><p>之所以不写版本号是因为添加“parent”标签里的内容后，“spring-boot-starter-parent”会为开发者提供常用jar的版本管理，所以我们不需要指定版本，使用人家提供好的就可以了。当然，指定也是可以的，这会覆盖官方默认的版本，不推荐。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>parent<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>relativePath<span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> lookup parent from repository <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span></code></pre><p>关于mp的版本，3.0.5的版本里许多功能已经不需要加入bean了，默认配置好的，按照我使用的经验来看，好像3.2.0以上的不需要配置“乐观锁”和“分页插件”。</p><h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><p>在 application.properties 配置文件中添加 MySQL 数据库的相关配置：</p><pre class=" language-java"><code class="language-java">spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">=</span>com<span class="token punctuation">.</span>p6spy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>spy<span class="token punctuation">.</span>P6SpyDriverspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>p6spy<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>mybatis_plus<span class="token operator">?</span>serverTimezone<span class="token operator">=</span>GMT<span class="token operator">%</span>2B8spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>username<span class="token operator">=</span>userspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token number">123456</span>spring<span class="token punctuation">.</span>profiles<span class="token punctuation">.</span>active<span class="token operator">=</span>dev#mybatis日志mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>log<span class="token operator">-</span>impl<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>StdOutImplmybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>global<span class="token operator">-</span>config<span class="token punctuation">.</span>db<span class="token operator">-</span>config<span class="token punctuation">.</span>logic<span class="token operator">-</span>delete<span class="token operator">-</span>value<span class="token operator">=</span><span class="token number">1</span>mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>global<span class="token operator">-</span>config<span class="token punctuation">.</span>db<span class="token operator">-</span>config<span class="token punctuation">.</span>logic<span class="token operator">-</span>not<span class="token operator">-</span>delete<span class="token operator">-</span>value<span class="token operator">=</span><span class="token number">0</span></code></pre><p>注意：</p><p>1、这里的 url 使用了 ?serverTimezone=GMT%2B8 后缀，因为Spring Boot 2.1 集成了 8.0版本的jdbc驱动，这个版本的 jdbc 驱动需要添加这个后缀，否则运行测试用例报告如下错误：</p><p>java.sql.SQLException: The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or represents more </p><p>2、这里的 driver-class-name 使用了  com.mysql.cj.jdbc.Driver ，在 jdbc 8 中 建议使用这个驱动，之前的 com.mysql.jdbc.Driver 已经被废弃，否则运行测试用例的时候会有 WARN 信息</p><h3 id="三、部分代码注意点"><a href="#三、部分代码注意点" class="headerlink" title="三、部分代码注意点"></a>三、部分代码注意点</h3><ol><li>主类</li></ol><p>在 Spring Boot 启动类中添加 @MapperScan 注解，扫描 Mapper 文件夹<br>注意：扫描的包名根据实际情况修改，<br>且可以写在配置类，如MpConfig中：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.yhg.mpdemo.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mpconfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 分页插件     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>实体</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>ID_WORKER<span class="token punctuation">)</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//表中含下划线改为驼峰式命名</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>测试类的部分示例</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MpdemoApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//添加操作</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hhhhhh2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"lucy@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> insert <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"insert:"</span> <span class="token operator">+</span> insert<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//修改操作</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>3L<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLocker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//查询</span>        User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1248623851416322049L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//修改数据</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Helen Yao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"helen@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行更新</span>        userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectBatchIds</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> 2L<span class="token punctuation">,</span> 3L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//pagehandler类似</span>        <span class="token comment" spellcheck="true">//创建page对象</span>        <span class="token comment" spellcheck="true">//传入两个参数,第一个对象是当前页，第二个是每页显示的记录数</span>        Page<span class="token operator">&lt;</span>User<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用mp分页查询的方法</span>        <span class="token comment" spellcheck="true">//调用mp分页查询过程中,底层数据封装到page对象里面</span>        userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过page对象获取分页数据</span>        page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//删除</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>1248818588345819137L<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建querywrapper对象</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过QW设置条件</span><span class="token punctuation">}</span></code></pre><p>4.注意事项：</p><ul><li>ID_WORKER<br>MyBatis-Plus默认的主键策略是：ID_WORKER  全局唯一ID</li><li>自增策略<br>要想主键自增需要配置如下主键策略<br>需要在创建数据表的时候设置主键自增<br>实体字段中配置 @TableId(type = IdType.AUTO)<br>要想影响所有实体的配置，可以设置全局主键配置<pre><code>#全局设置主键生成策略mybatis-plus.global-config.db-config.id-type=auto</code></pre><h3 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h3>项目中经常会遇到一些数据，每次都使用相同的方式填充，例如记录的创建时间，更新时间等。<br>我们可以使用MyBatis Plus的自动填充功能，完成这些字段的赋值工作：</li></ul><p>（1）数据库表中添加自动填充字段<br>在User表中添加datetime类型的新的字段 create_time、update_time</p><p>（2）实体上添加注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span>    <span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span></code></pre><p>（3）实现元对象处理器接口<br>注意：不要忘记添加 @Component 注解<br>Component表示交给spring来处理，Service或者ResponseXXX</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Component表示交给spring来处理，Service或者ResponseXXX</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>主要适用场景：当要更新一条记录的时候，希望这条记录没有被别人更新，也就是说实现线程安全的数据更新<br>乐观锁实现方式：</p><p>取出记录时，获取当前version<br>更新时，带上这个version<br>执行更新时， set version = newVersion where version = oldVersion<br>如果version不对，就更新失败</p><p>（1）数据库中添加version字段</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> <span class="token punctuation">`</span>version<span class="token punctuation">`</span> <span class="token keyword">INT</span></code></pre><p>（2）实体类添加version字段<br>并添加 @Version 注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Version</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer version<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//版本号属性</span></code></pre><p>（3）元对象处理器接口添加version的insert默认值</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        ……        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//就是这句</span>        ……<span class="token punctuation">}</span></code></pre><p>特别说明:</p><p>支持的数据类型只有 int,Integer,long,Long,Date,Timestamp,LocalDateTime<br>整数类型下 newVersion = oldVersion + 1<br>newVersion 会回写到 entity 中<br>仅支持 updateById(id) 与 update(entity, wrapper) 方法<br>在 update(entity, wrapper) 方法下, wrapper 不能复用!!!<br>（4）在 MybatisPlusConfig 中注册 Bean<br>(3.6以上版本不用了，)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//乐观锁插件</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> OptimisticLockerInterceptor <span class="token function">optimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>MyBatis Plus自带分页插件，只要简单的配置即可实现分页功能<br>（1）创建配置类<br>此时可以删除主类中的 @MapperScan 扫描注解（新版应该也不用了）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 分页插件     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><p>逻辑删除<br>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除数据<br>逻辑删除：假删除，将对应数据中代表是否被删除字段状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录</p><p>（1）数据库中添加 deleted字段<br>（2）实体类添加deleted 字段<br>并加上 @TableLogic 注解 和 @TableField(fill = FieldFill.INSERT) 注解<br>@TableLogic</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@TableLogic</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer deleted<span class="token punctuation">;</span></code></pre><p>（3）元对象处理器接口添加deleted的insert默认值</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>（4）application.properties 加入配置<br>此为默认值，如果你的默认值和mp默认的一样,该配置可无</p><pre class=" language-java"><code class="language-java">mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>global<span class="token operator">-</span>config<span class="token punctuation">.</span>db<span class="token operator">-</span>config<span class="token punctuation">.</span>logic<span class="token operator">-</span>delete<span class="token operator">-</span>value<span class="token operator">=</span><span class="token number">1</span>mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>global<span class="token operator">-</span>config<span class="token punctuation">.</span>db<span class="token operator">-</span>config<span class="token punctuation">.</span>logic<span class="token operator">-</span>not<span class="token operator">-</span>delete<span class="token operator">-</span>value<span class="token operator">=</span><span class="token number">0</span></code></pre><p>（5）在 MybatisPlusConfig 中注册 Bean（注意新版的好像不用）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ISqlInjector <span class="token function">sqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LogicSqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>（6）测试逻辑删除<br>测试后发现，数据并没有被删除，deleted字段的值由0变成了1<br>测试后分析打印的sql语句，是一条update<br>注意：被删除数据的deleted 字段的值必须是 0，才能被选取出来执行逻辑删除的操作</p><h3 id="mp的条件构造器wapper"><a href="#mp的条件构造器wapper" class="headerlink" title="mp的条件构造器wapper"></a>mp的条件构造器wapper</h3><p><img src="https://img-blog.csdn.net/20181001202710403?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDM0Mjk0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br>上图表格为条件构造器使用中的各个方法格式和说明，如有不懂可参考<a href="https://mp.baomidou.com/guide/wrapper.html#abstractwrapper" target="_blank" rel="noopener">官方文档</a><br>以下代码转载自：<a href="https://blog.csdn.net/m0_37034294/article/details/82917234" target="_blank" rel="noopener">https://blog.csdn.net/m0_37034294/article/details/82917234</a><br>构造器条件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lqf<span class="token punctuation">.</span>crud<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>Wrapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span>LambdaQueryWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>update<span class="token punctuation">.</span>UpdateWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>IPage<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>toolkit<span class="token punctuation">.</span>Constants<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>pagination<span class="token punctuation">.</span>Page<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lqf<span class="token punctuation">.</span>crud<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>crm<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lqf<span class="token punctuation">.</span>crud<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>crm<span class="token punctuation">.</span>UserMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xerces<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EntityResolverWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Param<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>RowBounds<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringRunner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>jsf<span class="token punctuation">.</span>el<span class="token punctuation">.</span>WebApplicationContextFacesELResolver<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>Name<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryWrapperTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper mapper<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * &lt;p>     * 根据根据 entity 条件，删除记录,QueryWrapper实体对象封装操作类（可以为 null）     * 下方获取到queryWrapper后删除的查询条件为name字段为null的and年龄大于等于12的and email字段不为null的     * 同理写法条件添加的方式就不做过多介绍了。     * &lt;/p>     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper                <span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> delete <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete return count = "</span> <span class="token operator">+</span> delete<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * &lt;p>     * 根据 entity 条件，查询一条记录,     * 这里和上方删除构造条件一样，只是seletOne返回的是一条实体记录，当出现多条时会报错     * &lt;/p>     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"lqf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * &lt;p>     * 根据 Wrapper 条件，查询总记录数     * &lt;/p>     *     * @param queryWrapper 实体对象     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"lqf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer count <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * &lt;p>     * 根据 entity 条件，查询全部记录     * &lt;/p>     *     * @param queryWrapper 实体对象封装操作类（可以为 null）为null查询全部     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * &lt;p>     * 根据 Wrapper 条件，查询全部记录     * &lt;/p>     *     * @param queryWrapper 实体对象封装操作类（可以为 null）     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> maps <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectMaps</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">:</span> maps<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 打印结果     * {name=lqf, id=1046282328366391406, age=12, email=lqf@163.com, status=false}     * {name=lqf, id=1046282328366391407, age=12, email=lqf@163.com, status=false}     * {name=lqf, id=1046282328366391408, age=12, email=lqf@163.com, status=false}     * {name=lqf, id=1046282328366391409, age=12, email=lqf@163.com, status=false}     * {name=lqf, id=1046282328366391410, age=12, email=lqf@163.com, status=false}     * {name=lqf, id=1046282328366391411, age=12, email=lqf@163.com, status=false}     * {name=lqf, id=1046282328366391412, age=12, email=lqf@163.com, status=false}     * {name=lqf, id=1046282328366391413, age=12, email=lqf@163.com, status=false}     * {name=lqf, id=1046282328366391414, age=12, email=lqf@163.com, status=false}     * {name=lqf, id=1046282328366391415, age=12, email=lqf@163.com, status=false}     * {name=lqf, id=1046282328366391416, age=12, email=lqf@163.com, status=false}     * {name=lqf, id=1046282328366391417, age=12, email=lqf@163.com, status=false}     * {name=lqf, id=1046282328366391418, age=12, email=lqf@163.com, status=false}     * json类型的键值对模式     */</span>    <span class="token comment" spellcheck="true">/**     * &lt;p>     * 根据 entity 条件，查询全部记录（并翻页）     * &lt;/p>     *     * @param page         分页查询条件（可以为 RowBounds.DEFAULT）     * @param queryWrapper 实体对象封装操作类（可以为 null）     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Page<span class="token operator">&lt;</span>User<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IPage<span class="token operator">&lt;</span>User<span class="token operator">></span> userIPage <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userIPage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 打印结果     * ==>  Preparing: SELECT COUNT(1) FROM user     * ==> Parameters:     * &lt;==    Columns: COUNT(1)     * &lt;==        Row: 100     * ==>  Preparing: SELECT id,name,age,email,status FROM user LIMIT 0,5     * ==> Parameters:     * &lt;==    Columns: id, name, age, email, status     * &lt;==        Row: 1046282328366391319, lqf, 12, lqf@163.com, 0     * &lt;==        Row: 1046282328366391320, lqf, 12, lqf@163.com, 0     * &lt;==        Row: 1046282328366391321, lqf, 12, lqf@163.com, 0     * &lt;==        Row: 1046282328366391322, lqf, 12, lqf@163.com, 0     * &lt;==        Row: 1046282328366391323, lqf, 12, lqf@163.com, 0     * &lt;==      Total: 5     *     *     * 这里需要在项目中加入分页插件     *   @Bean     *     public PaginationInterceptor paginationInterceptor() {     *         return new PaginationInterceptor();     *     }     */</span>    <span class="token comment" spellcheck="true">/**     * &lt;p>     * 根据 Wrapper 条件，查询全部记录（并翻页）     * &lt;/p>     *     * @param page         分页查询条件     * @param queryWrapper 实体对象封装操作类     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectMapsPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Page<span class="token operator">&lt;</span>User<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IPage<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> mapIPage <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectMapsPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapIPage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 和上个分页同理只是返回类型不同     */</span>    <span class="token comment" spellcheck="true">/**     * &lt;p>     * 根据 whereEntity 条件，更新记录     * &lt;/p>     *     * @param entity        实体对象 (set 条件值,不能为 null)     * @param updateWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//修改值</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//修改条件s</span>        UpdateWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> userUpdateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userUpdateWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"lqf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> update <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> userUpdateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 打印结果     * ==>  Preparing: UPDATE user SET name=?, status=? WHERE name = ?     * ==> Parameters: zhangsan(String), true(Boolean), lqf(String)     * &lt;==    Updates: 100     * Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@56a4f272]     * 100     * 2018-10-02 15:08:03.928  INFO 7972 --- [       Thread-2] o.s.w.c.s.GenericWebApplicationContext   : Closing org.springframework.web.context.support.GenericWebApplicationContext@37313c65: startup date [Tue Oct 02 15:08:00 CST 2018]; root of context hierarchy     * 2018-10-02 15:08:03.937  INFO 7972 --- [       Thread-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...     * 2018-10-02 15:08:04.053  INFO 7972 --- [       Thread-2] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.     *     * Process finished with exit code 0     */</span><span class="token punctuation">}</span></code></pre><h1 id="day02"><a href="#day02" class="headerlink" title="day02"></a>day02</h1><h2 id="数据库建立"><a href="#数据库建立" class="headerlink" title="数据库建立"></a>数据库建立</h2><p>等整个项目做好后会将数据库文件以及源文件都上传百度云，如果此刻没链接说明项目还未完成。</p><h2 id="一-、工程结构介绍"><a href="#一-、工程结构介绍" class="headerlink" title="一 、工程结构介绍"></a>一 、工程结构介绍</h2><h2 id="二、创建父工程"><a href="#二、创建父工程" class="headerlink" title="二、创建父工程"></a>二、创建父工程</h2><p>1、创建sprigboot工程hg-parent<br>在idea开发工具中，使用 Spring Initializr 快速初始化一个 Spring Boot 模块，版本使用：2.2.1.RELEASE<br>groupId：com.hgx<br>artifactId：hg_parent<br>2、删除 src 目录<br>3、配置 pom.xml<br>修改版本为 ：2.2.1.RELEASE<br><img src="https://img-blog.csdnimg.cn/2020041223215554.png" alt="在这里插入图片描述"><br><artifactId> 节点后面添加  pom类型</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>artifactId<span class="token operator">></span>hg_parent<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>packaging<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>packaging<span class="token operator">></span></code></pre><p>4、在pom.xml中添加依赖的版本<br>删除pom.xml中的<dependencies>内容</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 以下内容删除 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><p>添加 <properties>确定依赖的版本</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>properties<span class="token operator">></span>        <span class="token operator">&lt;</span>java<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>java<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>guli<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT<span class="token operator">&lt;</span><span class="token operator">/</span>guli<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">3.0</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>velocity<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">2.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>velocity<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>swagger<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">2.7</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>swagger<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">2.8</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>jodatime<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">2.10</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>jodatime<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>poi<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">3.17</span><span class="token operator">&lt;</span><span class="token operator">/</span>poi<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>commons<span class="token operator">-</span>fileupload<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.3</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>commons<span class="token operator">-</span>fileupload<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>commons<span class="token operator">-</span>io<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">2.6</span><span class="token operator">&lt;</span><span class="token operator">/</span>commons<span class="token operator">-</span>io<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>httpclient<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">4.5</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>httpclient<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>jwt<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">0.7</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>jwt<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>aliyun<span class="token operator">-</span>java<span class="token operator">-</span>sdk<span class="token operator">-</span>core<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">4.3</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>aliyun<span class="token operator">-</span>java<span class="token operator">-</span>sdk<span class="token operator">-</span>core<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>aliyun<span class="token operator">-</span>sdk<span class="token operator">-</span>oss<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">3.1</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>aliyun<span class="token operator">-</span>sdk<span class="token operator">-</span>oss<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>aliyun<span class="token operator">-</span>java<span class="token operator">-</span>sdk<span class="token operator">-</span>vod<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">2.15</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>aliyun<span class="token operator">-</span>java<span class="token operator">-</span>sdk<span class="token operator">-</span>vod<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>aliyun<span class="token operator">-</span>java<span class="token operator">-</span>vod<span class="token operator">-</span>upload<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.4</span><span class="token punctuation">.</span><span class="token number">11</span><span class="token operator">&lt;</span><span class="token operator">/</span>aliyun<span class="token operator">-</span>java<span class="token operator">-</span>vod<span class="token operator">-</span>upload<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>aliyun<span class="token operator">-</span>sdk<span class="token operator">-</span>vod<span class="token operator">-</span>upload<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.4</span><span class="token punctuation">.</span><span class="token number">11</span><span class="token operator">&lt;</span><span class="token operator">/</span>aliyun<span class="token operator">-</span>sdk<span class="token operator">-</span>vod<span class="token operator">-</span>upload<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>fastjson<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">&lt;</span><span class="token operator">/</span>fastjson<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>gson<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">2.8</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>gson<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>json<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">20170516</span><span class="token operator">&lt;</span><span class="token operator">/</span>json<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>commons<span class="token operator">-</span>dbutils<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.7</span><span class="token operator">&lt;</span><span class="token operator">/</span>commons<span class="token operator">-</span>dbutils<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>canal<span class="token punctuation">.</span>client<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>canal<span class="token punctuation">.</span>client<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>docker<span class="token punctuation">.</span>image<span class="token punctuation">.</span>prefix<span class="token operator">></span>zx<span class="token operator">&lt;</span><span class="token operator">/</span>docker<span class="token punctuation">.</span>image<span class="token punctuation">.</span>prefix<span class="token operator">></span>        <span class="token operator">&lt;</span>cloud<span class="token operator">-</span>alibaba<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">0.2</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>cloud<span class="token operator">-</span>alibaba<span class="token punctuation">.</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span></code></pre><p>配置 <dependencyManagement> 锁定依赖的版本</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependencyManagement<span class="token operator">></span>        <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>Spring Cloud<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>Hoxton<span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>                <span class="token operator">&lt;</span>type<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">></span>                <span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token keyword">import</span><span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>alibaba<span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>cloud<span class="token operator">-</span>alibaba<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>                <span class="token operator">&lt;</span>type<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">></span>                <span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token keyword">import</span><span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mybatis<span class="token operator">-</span>plus 持久层<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> velocity 模板引擎<span class="token punctuation">,</span> Mybatis Plus 代码生成器需要 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>velocity<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>velocity<span class="token operator">-</span>engine<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>velocity<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swagger<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>springfox<span class="token operator">-</span>swagger2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>swagger<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swagger ui<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>springfox<span class="token operator">-</span>swagger<span class="token operator">-</span>ui<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>swagger<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>aliyunOSS<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>aliyun<span class="token operator">-</span>sdk<span class="token operator">-</span>oss<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>日期时间工具<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>joda<span class="token operator">-</span>time<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>joda<span class="token operator">-</span>time<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>jodatime<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>xls<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>poi<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>poi<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>xlsx<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>poi<span class="token operator">-</span>ooxml<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>poi<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>文件上传<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>commons<span class="token operator">-</span>fileupload<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>fileupload<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>commons<span class="token operator">-</span>fileupload<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>commons<span class="token operator">-</span>io<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>commons<span class="token operator">-</span>io<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>io<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>commons<span class="token operator">-</span>io<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>httpclient<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>httpcomponents<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>httpclient<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>httpclient<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>code<span class="token punctuation">.</span>gson<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>gson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>gson<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> JWT <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>jsonwebtoken<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jjwt<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>jwt<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>aliyun<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>aliyun<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>aliyun<span class="token operator">-</span>java<span class="token operator">-</span>sdk<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>aliyun<span class="token operator">-</span>java<span class="token operator">-</span>sdk<span class="token operator">-</span>core<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>aliyun<span class="token operator">-</span>sdk<span class="token operator">-</span>oss<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>aliyun<span class="token operator">-</span>sdk<span class="token operator">-</span>oss<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>aliyun<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>aliyun<span class="token operator">-</span>java<span class="token operator">-</span>sdk<span class="token operator">-</span>vod<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>aliyun<span class="token operator">-</span>java<span class="token operator">-</span>sdk<span class="token operator">-</span>vod<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>aliyun<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>aliyun<span class="token operator">-</span>java<span class="token operator">-</span>vod<span class="token operator">-</span>upload<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>aliyun<span class="token operator">-</span>java<span class="token operator">-</span>vod<span class="token operator">-</span>upload<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>aliyun<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>aliyun<span class="token operator">-</span>sdk<span class="token operator">-</span>vod<span class="token operator">-</span>upload<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>aliyun<span class="token operator">-</span>sdk<span class="token operator">-</span>vod<span class="token operator">-</span>upload<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>fastjson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>fastjson<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>json<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>json<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>json<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>commons<span class="token operator">-</span>dbutils<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>dbutils<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>commons<span class="token operator">-</span>dbutils<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>otter<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>canal<span class="token punctuation">.</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>canal<span class="token punctuation">.</span>client<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencyManagement<span class="token operator">></span></code></pre><h2 id="三、搭建service模块"><a href="#三、搭建service模块" class="headerlink" title="三、搭建service模块"></a>三、搭建service模块</h2><p>1、在父工程hg-parent下面创建模块service</p><p>选择 maven类型，点击下一步<br>输入模块名称 service，下一步完成创建<br>2、添加模块类型是pom<br><artifactId> 节点后面添加  pom类型</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>artifactId<span class="token operator">></span>service<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>packaging<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>packaging<span class="token operator">></span></code></pre><p>3、添加项目需要的依赖</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>dependency<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>ribbon<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>hystrix依赖，主要是用  <span class="token annotation punctuation">@HystrixCommand</span> <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>dependency<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>hystrix<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>服务注册<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>dependency<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>alibaba<span class="token operator">-</span>nacos<span class="token operator">-</span>discovery<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>服务调用<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>dependency<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>openfeign<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mybatis<span class="token operator">-</span>plus<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mysql<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> velocity 模板引擎<span class="token punctuation">,</span> Mybatis Plus 代码生成器需要 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>velocity<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>velocity<span class="token operator">-</span>engine<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swagger<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>springfox<span class="token operator">-</span>swagger2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>springfox<span class="token operator">-</span>swagger<span class="token operator">-</span>ui<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>lombok用来简化实体类：需要安装lombok插件<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>xls<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>poi<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>poi<span class="token operator">-</span>ooxml<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>commons<span class="token operator">-</span>fileupload<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>fileupload<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>httpclient<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>httpcomponents<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>httpclient<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>commons<span class="token operator">-</span>io<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>commons<span class="token operator">-</span>io<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>io<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>gson<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>code<span class="token punctuation">.</span>gson<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>gson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.12</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><h2 id="四、搭建service-edu模块"><a href="#四、搭建service-edu模块" class="headerlink" title="四、搭建service-edu模块"></a>四、搭建service-edu模块</h2><p>1、在父工程service模块下面创建子模块service-edu</p><h2 id="五、讲师管理模块配置"><a href="#五、讲师管理模块配置" class="headerlink" title="五、讲师管理模块配置"></a>五、讲师管理模块配置</h2><p>1、在service下面service-edu模块中创建配置文件<br><img src="https://img-blog.csdnimg.cn/2020041223392590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Jpa2Ew,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>resources目录下创建文件 application.properties</p><pre class=" language-java"><code class="language-java"># 服务端口server<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">8001</span># 服务名spring<span class="token punctuation">.</span>application<span class="token punctuation">.</span>name<span class="token operator">=</span>service<span class="token operator">-</span>edu# 环境设置：dev、test、prodspring<span class="token punctuation">.</span>profiles<span class="token punctuation">.</span>active<span class="token operator">=</span>dev# mysql数据库连接spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driverspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>hgx<span class="token operator">?</span>serverTimezone<span class="token operator">=</span>GMT<span class="token operator">%</span>2B8spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>username<span class="token operator">=</span>userspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token number">123456</span>#返回json的全局时间格式spring<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>date<span class="token operator">-</span>format<span class="token operator">=</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token operator">:</span>mm<span class="token operator">:</span>ssspring<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>time<span class="token operator">-</span>zone<span class="token operator">=</span>GMT<span class="token operator">+</span><span class="token number">8</span></code></pre><p>下面这一段日志部分如果没有例外使用日志，如logback这些就要加上，否则注释掉。</p><pre class=" language-java"><code class="language-java">##设置日志级别#logging<span class="token punctuation">.</span>level<span class="token punctuation">.</span>root<span class="token operator">=</span>WARN##mybatis日志#mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>log<span class="token operator">-</span>impl<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>StdOutImpl</code></pre><p>或者在resources目录下创建文件 application.yml，补一个</p><pre class=" language-java"><code class="language-java">#### application<span class="token punctuation">.</span>ymlspring<span class="token operator">:</span>  application<span class="token operator">:</span>    name<span class="token operator">:</span> service<span class="token operator">-</span>eduprofiles<span class="token operator">:</span>    active<span class="token operator">:</span> dev####  application<span class="token operator">-</span>dev<span class="token punctuation">.</span>ymlserver<span class="token operator">:</span>  port<span class="token operator">:</span> <span class="token number">8001</span>mybatis<span class="token operator">-</span>plus<span class="token operator">:</span>  configuration<span class="token operator">:</span>    log<span class="token operator">-</span>impl<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>StdOutImplmapper<span class="token operator">-</span>locations<span class="token operator">:</span> classpath<span class="token operator">:</span>com<span class="token operator">/</span>atguigu<span class="token operator">/</span>service<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">/</span>mapper<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>xmlglobal<span class="token operator">-</span>config<span class="token operator">:</span>    db<span class="token operator">-</span>config<span class="token operator">:</span>      logic<span class="token operator">-</span>delete<span class="token operator">-</span>value<span class="token operator">:</span> <span class="token number">1</span>logic<span class="token operator">-</span>not<span class="token operator">-</span>delete<span class="token operator">-</span>value<span class="token operator">:</span> <span class="token number">0</span>spring<span class="token operator">:</span>datasource<span class="token operator">:</span>    type<span class="token operator">:</span> com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>HikariDataSourcedriver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">:</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driverurl<span class="token operator">:</span> jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>guli<span class="token operator">?</span>serverTimezone<span class="token operator">=</span>GMT<span class="token operator">%</span>2B8username<span class="token operator">:</span> rootpassword<span class="token operator">:</span> roothikari<span class="token operator">:</span>      connection<span class="token operator">-</span>test<span class="token operator">-</span>query<span class="token operator">:</span> SELECT <span class="token number">1</span>connection<span class="token operator">-</span>timeout<span class="token operator">:</span> <span class="token number">60000</span>idle<span class="token operator">-</span>timeout<span class="token operator">:</span> <span class="token number">500000</span>max<span class="token operator">-</span>lifetime<span class="token operator">:</span> <span class="token number">540000</span>maximum<span class="token operator">-</span>pool<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">12</span>minimum<span class="token operator">-</span>idle<span class="token operator">:</span> <span class="token number">10</span>pool<span class="token operator">-</span>name<span class="token operator">:</span> GuliHikariPooljackson<span class="token operator">:</span>    date<span class="token operator">-</span>format<span class="token operator">:</span> yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token operator">:</span>mm<span class="token operator">:</span>sstime<span class="token operator">-</span>zone<span class="token operator">:</span> GMT<span class="token operator">+</span><span class="token number">8</span></code></pre><p>2、创建MP代码生成器<br>在test/java目录下创建包com.atguigu.eduservice，创建代码生成器：CodeGenerator.java<br>建议在test下面生成</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>DbType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>IdType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>AutoGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>DataSourceConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PackageConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>StrategyConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>DateType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>NamingStrategy<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author 雨落弦鸣 * @since 2020/5/13 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeGenerator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1、创建代码生成器</span>        AutoGenerator mpg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2、全局配置</span>        GlobalConfig gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String projectPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span><span class="token string">"F:\\WORKING_PLACE\\hgx_edu\\hg_parent\\service\\service_edu"</span> <span class="token operator">+</span> <span class="token string">"/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"雨落弦鸣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成后是否打开资源管理器</span>        gc<span class="token punctuation">.</span><span class="token function">setFileOverride</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重新生成时文件是否覆盖</span>        gc<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//去掉Service接口的首字母I</span>        gc<span class="token punctuation">.</span><span class="token function">setIdType</span><span class="token punctuation">(</span>IdType<span class="token punctuation">.</span>ID_WORKER<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//主键策略</span>        gc<span class="token punctuation">.</span><span class="token function">setDateType</span><span class="token punctuation">(</span>DateType<span class="token punctuation">.</span>ONLY_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义生成的实体类中日期类型</span>        gc<span class="token punctuation">.</span><span class="token function">setSwagger2</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启Swagger2模式</span>        mpg<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>gc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3、数据源配置</span>        DataSourceConfig dsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/hgx?serverTimezone=GMT%2B8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4、包配置</span>        PackageConfig pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token string">"com.hgx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setModuleName</span><span class="token punctuation">(</span><span class="token string">"eduservice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//模块名</span>        pc<span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"entity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"mapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5、策略配置</span>        StrategyConfig strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span><span class="token string">"edu_teacher"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据库表映射到实体的命名策略</span>        strategy<span class="token punctuation">.</span><span class="token function">setTablePrefix</span><span class="token punctuation">(</span>pc<span class="token punctuation">.</span><span class="token function">getModuleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成实体时去掉表前缀</span>        strategy<span class="token punctuation">.</span><span class="token function">setColumnNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据库表字段映射到实体的命名策略</span>        strategy<span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lombok 模型 @Accessors(chain = true) setter链式操作</span>        strategy<span class="token punctuation">.</span><span class="token function">setRestControllerStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//restful api风格控制器</span>        strategy<span class="token punctuation">.</span><span class="token function">setControllerMappingHyphenStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//url中驼峰转连字符</span>        mpg<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6、执行</span>        mpg<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="六、编写后台管理api接口"><a href="#六、编写后台管理api接口" class="headerlink" title="六、编写后台管理api接口"></a>六、编写后台管理api接口</h2><p>1、编写controller代码<br>2、创建SpringBoot配置类<br>在edu包下创建config包，创建MyBatisPlusConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.hgx.eduservice.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EduConfig</span> <span class="token punctuation">{</span>……<span class="token punctuation">}</span></code></pre><p>关于@Configuration，他指示一个类声明一个或多个@Bean方法，并且可以由Spring容器处理，以便在运行时为这些bean生成BeanDefinition和服务请求。详解请看<a href="https://www.jianshu.com/p/721c76c1529c" target="_blank" rel="noopener">这里</a>。<br>3、配置SQL执行性能分析插件<br>4、创建SpringBoot启动类<br>创建启动类 EduApplication.java，注意启动类的创建位置</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.hgx"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EduApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EduApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5、运行启动类<br>访问<a href="http://localhost:8001/eduservice/teacher" target="_blank" rel="noopener">http://localhost:8001/eduservice/teacher</a><br>得到json数据</p><p>6、统一返回的json时间格式<br>默认情况下json时间格式带有时区，并且是世界标准时间，和我们的时间差了八个小时<br>在application.properties中设置</p><pre class=" language-java"><code class="language-java">#返回json的全局时间格式spring<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>date<span class="token operator">-</span>format<span class="token operator">=</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token operator">:</span>mm<span class="token operator">:</span>ssspring<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>time<span class="token operator">-</span>zone<span class="token operator">=</span>GMT<span class="token operator">+</span><span class="token number">8</span></code></pre><h2 id="七、讲师逻辑删除功能"><a href="#七、讲师逻辑删除功能" class="headerlink" title="七、讲师逻辑删除功能"></a>七、讲师逻辑删除功能</h2><p>1、EduTeacherController添加删除方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//逻辑删除讲师的方法</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">removeTeacher</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"讲师ID"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@PathVariable</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> teacherService<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>2、配置逻辑删除插件<br>EduConfig中配置</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 逻辑删除插件 */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ISqlInjector <span class="token function">sqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LogicSqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="一、Swagger2介绍"><a href="#一、Swagger2介绍" class="headerlink" title="一、Swagger2介绍"></a>一、Swagger2介绍</h2><p>前后端分离开发模式中，api文档是最好的沟通方式。<br>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。<br>及时性 (接口变更后，能够及时准确地通知相关前后端开发人员)<br>规范性 (并且保证接口的规范性，如接口的地址，请求方式，参数及响应格式和错误信息)<br>一致性 (接口信息一致，不会出现因开发人员拿到的文档版本不一致，而出现分歧)<br>可测性 (直接在接口文档上进行测试，以方便理解业务)</p><p>二、配置Swagger2<br>1、创建common模块<br>在guli-parent下创建模块common<br>配置：</p><p>groupId：com.hgx</p><p>artifactId：common<br>2、在common中引入相关依赖</p><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>provided<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mybatis<span class="token operator">-</span>plus<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>provided<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>lombok用来简化实体类：需要安装lombok插件<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>provided<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swagger<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>springfox<span class="token operator">-</span>swagger2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>provided<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>springfox<span class="token operator">-</span>swagger<span class="token operator">-</span>ui<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>provided<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> redis <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>data<span class="token operator">-</span>redis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> spring2<span class="token punctuation">.</span>X集成redis所需common<span class="token operator">-</span>pool2        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>pool2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.6</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><p>注意后面的这个，酌情注意</p><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>common<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>packaging<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>packaging<span class="token operator">></span>    <span class="token operator">&lt;</span>modules<span class="token operator">></span>        <span class="token operator">&lt;</span>module<span class="token operator">></span>service_base<span class="token operator">&lt;</span><span class="token operator">/</span>module<span class="token operator">></span>        <span class="token operator">&lt;</span>module<span class="token operator">></span>common_utils<span class="token operator">&lt;</span><span class="token operator">/</span>module<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>modules<span class="token operator">></span></code></pre><p>3、在common下面创建子模块service-base<br>3、在模块service-base中，创建swagger的配置类<br>创建包com.atguigu.servicebase.config，创建类SwaggerConfig</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hgx<span class="token punctuation">.</span>servicebase<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span>Predicates<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>ApiInfoBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>PathSelectors<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>ApiInfo<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>Contact<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>DocumentationType<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>Docket<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>EnableSwagger2<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">//配置类</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token comment" spellcheck="true">//Swagger注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">webApiConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"webApi"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">webApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>Predicates<span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">regex</span><span class="token punctuation">(</span><span class="token string">"/admin/.*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>Predicates<span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">regex</span><span class="token punctuation">(</span><span class="token string">"/error.*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">webApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"网站-课程中心API文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"本文档描述了课程中心微服务接口定义"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"雨落弦鸣"</span><span class="token punctuation">,</span> <span class="token string">"http://hgx.com"</span><span class="token punctuation">,</span> <span class="token string">"1790464356@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4、在模块service模块中引入service-base</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>hgx<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>service_base<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>5、在service-edu启动类上添加注解，进行测试<br>关于<a href="https://blog.csdn.net/weixin_38357164/article/details/83503023" target="_blank" rel="noopener">扫描包的注解</a>详细可看。<br>6、API模型<br>可以添加一些自定义设置，例如：<br>定义样例数据</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"创建时间"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"2019-01-01 8:00:00"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token keyword">private</span> Date gmtCreate<span class="token punctuation">;</span><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"更新时间"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"2019-01-01 8:00:00"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span><span class="token keyword">private</span> Date gmtModified<span class="token punctuation">;</span></code></pre><p>5、定义接口说明和参数说明<br>定义在类上：@Api<br>定义在方法上：@ApiOperation<br>定义在参数上：@ApiParam</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/eduservice/teacher"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"讲师管理"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EduTeacherController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//把service注入</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EduTeacherService teacherService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1.查询讲师表所有数据</span>    <span class="token comment" spellcheck="true">//rest风格</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"所有讲师列表"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"findAll"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">findAllTeacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用service的方法实现查询所有的操作</span>        List<span class="token operator">&lt;</span>EduTeacher<span class="token operator">></span> list <span class="token operator">=</span> teacherService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//逻辑删除讲师的方法</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">removeTeacher</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"讲师ID"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@PathVariable</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> teacherService<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="一、统一返回数据格式"><a href="#一、统一返回数据格式" class="headerlink" title="一、统一返回数据格式"></a>一、统一返回数据格式</h2><p>项目中我们会将响应封装成json返回，一般我们会将所有接口的数据格式统一， 使前端(iOS Android, Web)对数据的操作更一致、轻松。<br>一般情况下，统一返回数据格式没有固定的格式，只要能描述清楚返回的数据状态以及要返回的具体数据就可以。但是一般会包含状态码、返回消息、数据这几部分内容<br>因此，我们定义统一结果<br>二、创建统一结果返回类<br>1、在common模块下创建子模块common-utils<br>2、创建接口定义返回码<br>创建包com.atguigu.commonutils，创建接口 ResultCode.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ResultCode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Integer SUCCESS <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成功</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Integer ERROR <span class="token operator">=</span> <span class="token number">20001</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//失败</span><span class="token punctuation">}</span></code></pre><p>4、创建结果类<br>创建类 R.java，注意这个R，后面用到的时候，要导入包含R的这个以来的模块</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//统一返回借口属性</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"是否成功"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Boolean success<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"返回码"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"返回消息"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"返回数据"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造方法私有化</span>    <span class="token keyword">private</span> <span class="token function">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//链式编程</span>    <span class="token comment" spellcheck="true">//    成功的静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> R <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        R r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>ResultCode<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    失败的静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> R <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        R r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>ResultCode<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> R <span class="token function">success</span><span class="token punctuation">(</span>Boolean success<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> R <span class="token function">message</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> R <span class="token function">code</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> R <span class="token function">data</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> R <span class="token function">data</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="二、统一返回结果使用"><a href="#二、统一返回结果使用" class="headerlink" title="二、统一返回结果使用"></a>二、统一返回结果使用</h2><p>1、在service模块中添加依赖</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>hgx<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>common_utils<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>这个时候要注意，如果在service_base中已经包含过commo_utils了，那么直接引入service_base就可以删掉commo_utils了。<br>2、修改Controller中的返回结果<br>列表</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//1.查询讲师表所有数据</span>    <span class="token comment" spellcheck="true">//rest风格</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"所有讲师列表"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"findAll"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">findAllTeacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用service的方法实现查询所有的操作</span>        List<span class="token operator">&lt;</span>EduTeacher<span class="token operator">></span> list <span class="token operator">=</span> teacherService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>删除</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//逻辑删除讲师的方法</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">removeTeacher</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"讲师ID"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@PathVariable</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> teacherService<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="一、分页"><a href="#一、分页" class="headerlink" title="一、分页"></a>一、分页</h2><p>1、EduConfig中配置分页插件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 分页插件     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>2、分页Controller方法<br>Controller中添加分页方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//分页查询讲师的方法</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"pageTeacher/{current}/{limit}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">pageListTeacher</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> current<span class="token punctuation">,</span>                             <span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建page对象</span>        Page<span class="token operator">&lt;</span>EduTeacher<span class="token operator">></span> pageTeacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法实现分类</span>        <span class="token comment" spellcheck="true">//调用方法的时候，底层封装，把分页所有数据封装到pageTeacher对象里面</span>        teacherService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>pageTeacher<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        try {</span><span class="token comment" spellcheck="true">//            int i = 10 / 0;</span><span class="token comment" spellcheck="true">//        } catch (Exception e) {</span><span class="token comment" spellcheck="true">//          //执行自定义异常</span><span class="token comment" spellcheck="true">//            throw new GuliException(20001,"执行了自定义异常处理...");</span><span class="token comment" spellcheck="true">//        }</span>        <span class="token keyword">long</span> total <span class="token operator">=</span> pageTeacher<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总记录数</span>        List<span class="token operator">&lt;</span>EduTeacher<span class="token operator">></span> records <span class="token operator">=</span> pageTeacher<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"rows"</span><span class="token punctuation">,</span> records<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="二、条件查询"><a href="#二、条件查询" class="headerlink" title="二、条件查询"></a>二、条件查询</h2><p>根据讲师名称name，讲师头衔level、讲师入驻时间gmt_create（时间段）查询<br>1、创建查询对象<br>在entity中新建一个包vo，在里面添加一个teacherQuery类查询对象就好了</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherQuery</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"教师名称,模糊查询"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"头衔 1高级讲师 2首席讲师"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer level<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"查询开始时间"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"2019-01-01 10:10:10"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String begin<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意，这里使用的是String类型，前端传过来的数据无需进行类型转换</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"查询结束时间"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"2019-12-01 10:10:10"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String end<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、在controller写具体方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//条件查询带分页的方法</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"pageTeacherCondition/{current}/{limit}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">pageTeacherCondition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> current<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> limit<span class="token punctuation">,</span>                                  <span class="token annotation punctuation">@RequestBody</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> TeacherQuery teacherQuery<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建page对象</span>        Page<span class="token operator">&lt;</span>EduTeacher<span class="token operator">></span> pageTeacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构建条件</span>        QueryWrapper<span class="token operator">&lt;</span>EduTeacher<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//多条件组合查询</span>        <span class="token comment" spellcheck="true">//mybatis 动态sql</span>        <span class="token comment" spellcheck="true">//判断条件值是否为空，如果不为空拼接条件</span>        String name <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer level <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String begin <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String end <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            wrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"level"</span><span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>begin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            wrapper<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"gmt_create"</span><span class="token punctuation">,</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            wrapper<span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span><span class="token string">"gmt_create"</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//wrapper</span>        <span class="token comment" spellcheck="true">//调用方法实现条件查询分页</span>        teacherService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>pageTeacher<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> total <span class="token operator">=</span> pageTeacher<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总记录数</span>        List<span class="token operator">&lt;</span>EduTeacher<span class="token operator">></span> records <span class="token operator">=</span> pageTeacher<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据list集合</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"rows"</span><span class="token punctuation">,</span> records<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>实际操作中更加建议放到service层，例如（这部分可以暂时先不做）。</p><h5 id="此处对于RequestBody和ResponseBody做个解释，"><a href="#此处对于RequestBody和ResponseBody做个解释，" class="headerlink" title="此处对于RequestBody和ResponseBody做个解释，"></a>此处对于RequestBody和ResponseBody做个解释，</h5><p>@RequestBody：</p><p>使用json传数据，把json数据封装到对应对象里面，此时需要用到post，其中request= false，表示这个可以为空</p><p>@ResponseBody：</p><p>返回数据，返回json数据</p><h2 id="一、新增和修改功能——自动填充封装"><a href="#一、新增和修改功能——自动填充封装" class="headerlink" title="一、新增和修改功能——自动填充封装"></a>一、新增和修改功能——自动填充封装</h2><p>1、在service-base模块中添加<br>创建包handler，创建自动填充类 MyMetaObjectHandler</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//属性名称，不是字段名称</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"gmtCreate"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"gmtModified"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"gmtModified"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2、在实体类添加自动填充注解</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"创建时间"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这个东西</span>    <span class="token keyword">private</span> Date gmtCreate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"更新时间"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span>    <span class="token keyword">private</span> Date gmtModified<span class="token punctuation">;</span></code></pre><h2 id="二、controller方法定义"><a href="#二、controller方法定义" class="headerlink" title="二、controller方法定义"></a>二、controller方法定义</h2><p>1、新增<br>2、根据id查询<br>3、根据id修改</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//添加讲师接口的方法</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"addTeacher"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">addTeacher</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> EduTeacher eduTeacher<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> save <span class="token operator">=</span> teacherService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>eduTeacher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>save<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据讲师id进行查询</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"getTeacher/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">getTeacher</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        EduTeacher eduTeacher <span class="token operator">=</span> teacherService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"teacher"</span><span class="token punctuation">,</span> eduTeacher<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//讲师修改功能</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"updateTeacher"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">updateTeacher</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> EduTeacher eduTeacher<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> teacherService<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>eduTeacher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="二、异常处理"><a href="#二、异常处理" class="headerlink" title="二、异常处理"></a>二、异常处理</h2><ul><li>创建统一异常处理器<br>在service-base中创建统一异常处理类GlobalExceptionHandler.java：</li><li>添加特定异常处理方法<br>GlobalExceptionHandler.java中添加</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//指定出现什么异常执行这个方法</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span><span class="token comment" spellcheck="true">//为了返回数据</span>    <span class="token keyword">public</span> R <span class="token function">error</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"执行了全局异常处理..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    特定异常处理</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>ArithmeticException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span><span class="token comment" spellcheck="true">//为了返回数据</span>    <span class="token keyword">public</span> R <span class="token function">error</span><span class="token punctuation">(</span>ArithmeticException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"执行了ArithmeticException异常处理..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>创建自定义异常类<br>1、guliException中：</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GuliException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//一个类要有有参和无参构造方法</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//状态嘛</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//异常信息</span><span class="token punctuation">}</span></code></pre><p>2、业务中需要的位置抛出GuliException</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//执行自定义异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">GuliException</span><span class="token punctuation">(</span><span class="token number">20001</span><span class="token punctuation">,</span><span class="token string">"执行了自定义异常处理..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span></code></pre><p>3、添加异常处理方法<br>GlobalExceptionHandler.java中添加</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//    自定义异常处理</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>GuliException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span><span class="token comment" spellcheck="true">//为了返回数据</span>    <span class="token keyword">public</span> R <span class="token function">error</span><span class="token punctuation">(</span>GuliException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="一、日志"><a href="#一、日志" class="headerlink" title="一、日志"></a>一、日志</h2><p>1、配置日志级别<br>日志记录器（Logger）的行为是分等级的。如下表所示：<br>分为：OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL<br>默认情况下，spring boot从控制台打印出来的日志级别只有INFO及以上级别，可以配置日志级别</p><pre class=" language-java"><code class="language-java">#设置日志级别logging<span class="token punctuation">.</span>level<span class="token punctuation">.</span>root<span class="token operator">=</span>WARN</code></pre><p>这种方式只能将日志打印在控制台上</p><h2 id="二、Logback日志"><a href="#二、Logback日志" class="headerlink" title="二、Logback日志"></a>二、Logback日志</h2><p>spring boot内部使用Logback作为日志实现的框架。<br>Logback和log4j非常相似，如果你对log4j很熟悉，那对logback很快就会得心应手。<br>logback相对于log4j的一些优点：<a href="https://blog.csdn.net/caisini_vc/article/details/48551287" target="_blank" rel="noopener">https://blog.csdn.net/caisini_vc/article/details/48551287</a><br>1、配置logback日志<br>删除application.properties中的日志配置<br>安装idea彩色日志插件：grep-console<br>resources 中创建 logback-spring.xml </p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>configuration  scan<span class="token operator">=</span><span class="token string">"true"</span> scanPeriod<span class="token operator">=</span><span class="token string">"10 seconds"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 日志级别从低到高分为TRACE <span class="token operator">&lt;</span> DEBUG <span class="token operator">&lt;</span> INFO <span class="token operator">&lt;</span> WARN <span class="token operator">&lt;</span> ERROR <span class="token operator">&lt;</span> FATAL，如果设置为WARN，则低于WARN的信息都不会输出 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> scan<span class="token operator">:</span>当此属性设置为<span class="token boolean">true</span>时，配置文件如果发生改变，将会被重新加载，默认值为<span class="token boolean">true</span> <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> scanPeriod<span class="token operator">:</span>设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为<span class="token boolean">true</span>时，此属性生效。默认的时间间隔为<span class="token number">1</span>分钟。 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> debug<span class="token operator">:</span>当此属性设置为<span class="token boolean">true</span>时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为<span class="token boolean">false</span>。 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>contextName<span class="token operator">></span>logback<span class="token operator">&lt;</span><span class="token operator">/</span>contextName<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$<span class="token punctuation">{</span><span class="token punctuation">}</span>”来使用变量。 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"log.path"</span> value<span class="token operator">=</span><span class="token string">"F:/JAVA_MAKE/day04/guli_1010/edu"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 彩色日志 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> magenta<span class="token operator">:</span>洋红 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> boldMagenta<span class="token operator">:</span>粗红<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> cyan<span class="token operator">:</span>青色 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> white<span class="token operator">:</span>白色 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> magenta<span class="token operator">:</span>洋红 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"CONSOLE_LOG_PATTERN"</span>              value<span class="token operator">=</span><span class="token string">"%yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>输出到控制台<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>appender name<span class="token operator">=</span><span class="token string">"CONSOLE"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.core.ConsoleAppender"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>filter <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.classic.filter.ThresholdFilter"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>level<span class="token operator">></span>INFO<span class="token operator">&lt;</span><span class="token operator">/</span>level<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span>        <span class="token operator">&lt;</span>encoder<span class="token operator">></span>            <span class="token operator">&lt;</span>Pattern<span class="token operator">></span>$<span class="token punctuation">{</span>CONSOLE_LOG_PATTERN<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Pattern<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置字符集 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>charset<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>charset<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>encoder<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>appender<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>输出到文件<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 时间滚动输出 level为 INFO 日志 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>appender name<span class="token operator">=</span><span class="token string">"INFO_FILE"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.core.rolling.RollingFileAppender"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 正在记录的日志文件的路径及文件名 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>file<span class="token operator">></span>$<span class="token punctuation">{</span>log<span class="token punctuation">.</span>path<span class="token punctuation">}</span><span class="token operator">/</span>log_info<span class="token punctuation">.</span>log<span class="token operator">&lt;</span><span class="token operator">/</span>file<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>日志文件输出格式<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>encoder<span class="token operator">></span>            <span class="token operator">&lt;</span>pattern<span class="token operator">></span><span class="token operator">%</span>d<span class="token punctuation">{</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token operator">:</span>mm<span class="token operator">:</span>ss<span class="token punctuation">.</span>SSS<span class="token punctuation">}</span> <span class="token punctuation">[</span><span class="token operator">%</span>thread<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">-</span>5level <span class="token operator">%</span>logger<span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token operator">%</span>msg<span class="token operator">%</span>n<span class="token operator">&lt;</span><span class="token operator">/</span>pattern<span class="token operator">></span>            <span class="token operator">&lt;</span>charset<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>charset<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>encoder<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 日志记录器的滚动策略，按日期，按大小记录 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>rollingPolicy <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 每天日志归档路径以及格式 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>fileNamePattern<span class="token operator">></span>$<span class="token punctuation">{</span>log<span class="token punctuation">.</span>path<span class="token punctuation">}</span><span class="token operator">/</span>info<span class="token operator">/</span>log<span class="token operator">-</span>info<span class="token operator">-</span><span class="token operator">%</span>d<span class="token punctuation">{</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd<span class="token punctuation">}</span><span class="token punctuation">.</span>%i<span class="token punctuation">.</span>log<span class="token operator">&lt;</span><span class="token operator">/</span>fileNamePattern<span class="token operator">></span>            <span class="token operator">&lt;</span>timeBasedFileNamingAndTriggeringPolicy <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>maxFileSize<span class="token operator">></span>100MB<span class="token operator">&lt;</span><span class="token operator">/</span>maxFileSize<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>timeBasedFileNamingAndTriggeringPolicy<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>日志文件保留天数<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>maxHistory<span class="token operator">></span><span class="token number">15</span><span class="token operator">&lt;</span><span class="token operator">/</span>maxHistory<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>rollingPolicy<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 此日志文件只记录info级别的 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>filter <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.classic.filter.LevelFilter"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>level<span class="token operator">></span>INFO<span class="token operator">&lt;</span><span class="token operator">/</span>level<span class="token operator">></span>            <span class="token operator">&lt;</span>onMatch<span class="token operator">></span>ACCEPT<span class="token operator">&lt;</span><span class="token operator">/</span>onMatch<span class="token operator">></span>            <span class="token operator">&lt;</span>onMismatch<span class="token operator">></span>DENY<span class="token operator">&lt;</span><span class="token operator">/</span>onMismatch<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>appender<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 时间滚动输出 level为 WARN 日志 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>appender name<span class="token operator">=</span><span class="token string">"WARN_FILE"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.core.rolling.RollingFileAppender"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 正在记录的日志文件的路径及文件名 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>file<span class="token operator">></span>$<span class="token punctuation">{</span>log<span class="token punctuation">.</span>path<span class="token punctuation">}</span><span class="token operator">/</span>log_warn<span class="token punctuation">.</span>log<span class="token operator">&lt;</span><span class="token operator">/</span>file<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>日志文件输出格式<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>encoder<span class="token operator">></span>            <span class="token operator">&lt;</span>pattern<span class="token operator">></span><span class="token operator">%</span>d<span class="token punctuation">{</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token operator">:</span>mm<span class="token operator">:</span>ss<span class="token punctuation">.</span>SSS<span class="token punctuation">}</span> <span class="token punctuation">[</span><span class="token operator">%</span>thread<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">-</span>5level <span class="token operator">%</span>logger<span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token operator">%</span>msg<span class="token operator">%</span>n<span class="token operator">&lt;</span><span class="token operator">/</span>pattern<span class="token operator">></span>            <span class="token operator">&lt;</span>charset<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>charset<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 此处设置字符集 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>encoder<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 日志记录器的滚动策略，按日期，按大小记录 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>rollingPolicy <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>fileNamePattern<span class="token operator">></span>$<span class="token punctuation">{</span>log<span class="token punctuation">.</span>path<span class="token punctuation">}</span><span class="token operator">/</span>warn<span class="token operator">/</span>log<span class="token operator">-</span>warn<span class="token operator">-</span><span class="token operator">%</span>d<span class="token punctuation">{</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd<span class="token punctuation">}</span><span class="token punctuation">.</span>%i<span class="token punctuation">.</span>log<span class="token operator">&lt;</span><span class="token operator">/</span>fileNamePattern<span class="token operator">></span>            <span class="token operator">&lt;</span>timeBasedFileNamingAndTriggeringPolicy <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>maxFileSize<span class="token operator">></span>100MB<span class="token operator">&lt;</span><span class="token operator">/</span>maxFileSize<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>timeBasedFileNamingAndTriggeringPolicy<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>日志文件保留天数<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>maxHistory<span class="token operator">></span><span class="token number">15</span><span class="token operator">&lt;</span><span class="token operator">/</span>maxHistory<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>rollingPolicy<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 此日志文件只记录warn级别的 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>filter <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.classic.filter.LevelFilter"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>level<span class="token operator">></span>warn<span class="token operator">&lt;</span><span class="token operator">/</span>level<span class="token operator">></span>            <span class="token operator">&lt;</span>onMatch<span class="token operator">></span>ACCEPT<span class="token operator">&lt;</span><span class="token operator">/</span>onMatch<span class="token operator">></span>            <span class="token operator">&lt;</span>onMismatch<span class="token operator">></span>DENY<span class="token operator">&lt;</span><span class="token operator">/</span>onMismatch<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>appender<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 时间滚动输出 level为 ERROR 日志 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>appender name<span class="token operator">=</span><span class="token string">"ERROR_FILE"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.core.rolling.RollingFileAppender"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 正在记录的日志文件的路径及文件名 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>file<span class="token operator">></span>$<span class="token punctuation">{</span>log<span class="token punctuation">.</span>path<span class="token punctuation">}</span><span class="token operator">/</span>log_error<span class="token punctuation">.</span>log<span class="token operator">&lt;</span><span class="token operator">/</span>file<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>日志文件输出格式<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>encoder<span class="token operator">></span>            <span class="token operator">&lt;</span>pattern<span class="token operator">></span><span class="token operator">%</span>d<span class="token punctuation">{</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token operator">:</span>mm<span class="token operator">:</span>ss<span class="token punctuation">.</span>SSS<span class="token punctuation">}</span> <span class="token punctuation">[</span><span class="token operator">%</span>thread<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">-</span>5level <span class="token operator">%</span>logger<span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token operator">%</span>msg<span class="token operator">%</span>n<span class="token operator">&lt;</span><span class="token operator">/</span>pattern<span class="token operator">></span>            <span class="token operator">&lt;</span>charset<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>charset<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 此处设置字符集 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>encoder<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 日志记录器的滚动策略，按日期，按大小记录 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>rollingPolicy <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>fileNamePattern<span class="token operator">></span>$<span class="token punctuation">{</span>log<span class="token punctuation">.</span>path<span class="token punctuation">}</span><span class="token operator">/</span>error<span class="token operator">/</span>log<span class="token operator">-</span>error<span class="token operator">-</span><span class="token operator">%</span>d<span class="token punctuation">{</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd<span class="token punctuation">}</span><span class="token punctuation">.</span>%i<span class="token punctuation">.</span>log<span class="token operator">&lt;</span><span class="token operator">/</span>fileNamePattern<span class="token operator">></span>            <span class="token operator">&lt;</span>timeBasedFileNamingAndTriggeringPolicy <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>maxFileSize<span class="token operator">></span>100MB<span class="token operator">&lt;</span><span class="token operator">/</span>maxFileSize<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>timeBasedFileNamingAndTriggeringPolicy<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>日志文件保留天数<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>maxHistory<span class="token operator">></span><span class="token number">15</span><span class="token operator">&lt;</span><span class="token operator">/</span>maxHistory<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>rollingPolicy<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 此日志文件只记录ERROR级别的 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>filter <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.classic.filter.LevelFilter"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>level<span class="token operator">></span>ERROR<span class="token operator">&lt;</span><span class="token operator">/</span>level<span class="token operator">></span>            <span class="token operator">&lt;</span>onMatch<span class="token operator">></span>ACCEPT<span class="token operator">&lt;</span><span class="token operator">/</span>onMatch<span class="token operator">></span>            <span class="token operator">&lt;</span>onMismatch<span class="token operator">></span>DENY<span class="token operator">&lt;</span><span class="token operator">/</span>onMismatch<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>appender<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        <span class="token operator">&lt;</span>logger<span class="token operator">></span>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<span class="token operator">&lt;</span>appender<span class="token operator">></span>。        <span class="token operator">&lt;</span>logger<span class="token operator">></span>仅有一个name属性，        一个可选的level和一个可选的addtivity属性。        name<span class="token operator">:</span>用来指定受此logger约束的某一个包或者具体的某一个类。        level<span class="token operator">:</span>用来设置打印级别，大小写无关：TRACE<span class="token punctuation">,</span> DEBUG<span class="token punctuation">,</span> INFO<span class="token punctuation">,</span> WARN<span class="token punctuation">,</span> ERROR<span class="token punctuation">,</span> ALL 和 OFF，              如果未设置此属性，那么当前logger将会继承上级的级别。    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：        第一种把<span class="token operator">&lt;</span>root level<span class="token operator">=</span><span class="token string">"INFO"</span><span class="token operator">></span>改成<span class="token operator">&lt;</span>root level<span class="token operator">=</span><span class="token string">"DEBUG"</span><span class="token operator">></span>这样就会打印sql，不过这样日志那边会出现很多其他消息        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别：     <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>开发环境<span class="token operator">:</span>打印控制台<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>springProfile name<span class="token operator">=</span><span class="token string">"dev"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>可以输出项目中的debug日志，包括mybatis的sql日志<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>logger name<span class="token operator">=</span><span class="token string">"com.guli"</span> level<span class="token operator">=</span><span class="token string">"INFO"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性            level<span class="token operator">:</span>用来设置打印级别，大小写无关：TRACE<span class="token punctuation">,</span> DEBUG<span class="token punctuation">,</span> INFO<span class="token punctuation">,</span> WARN<span class="token punctuation">,</span> ERROR<span class="token punctuation">,</span> ALL 和 OFF，默认是DEBUG            可以包含零个或多个appender元素。        <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>root level<span class="token operator">=</span><span class="token string">"INFO"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>appender<span class="token operator">-</span>ref ref<span class="token operator">=</span><span class="token string">"CONSOLE"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>appender<span class="token operator">-</span>ref ref<span class="token operator">=</span><span class="token string">"INFO_FILE"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>appender<span class="token operator">-</span>ref ref<span class="token operator">=</span><span class="token string">"WARN_FILE"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>appender<span class="token operator">-</span>ref ref<span class="token operator">=</span><span class="token string">"ERROR_FILE"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>root<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>springProfile<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>生产环境<span class="token operator">:</span>输出到文件<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>springProfile name<span class="token operator">=</span><span class="token string">"pro"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>root level<span class="token operator">=</span><span class="token string">"INFO"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>appender<span class="token operator">-</span>ref ref<span class="token operator">=</span><span class="token string">"CONSOLE"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>appender<span class="token operator">-</span>ref ref<span class="token operator">=</span><span class="token string">"DEBUG_FILE"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>appender<span class="token operator">-</span>ref ref<span class="token operator">=</span><span class="token string">"INFO_FILE"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>appender<span class="token operator">-</span>ref ref<span class="token operator">=</span><span class="token string">"ERROR_FILE"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>appender<span class="token operator">-</span>ref ref<span class="token operator">=</span><span class="token string">"WARN_FILE"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>root<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>springProfile<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span></code></pre><p>2、将错误日志输出到文件<br>GlobalExceptionHandler.java 中<br>类上添加注解<code>@Slf4j</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>……</code></pre><p>异常输出语句：<code>log.error(e.getMessage());</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//    自定义异常处理</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>GuliException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span><span class="token comment" spellcheck="true">//为了返回数据</span>    <span class="token keyword">public</span> R <span class="token function">error</span><span class="token punctuation">(</span>GuliException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="day03（以后不分day了，太麻烦了）"><a href="#day03（以后不分day了，太麻烦了）" class="headerlink" title="day03（以后不分day了，太麻烦了）"></a>day03（以后不分day了，太麻烦了）</h1><h2 id="补充说明，前景提要，非常重要："><a href="#补充说明，前景提要，非常重要：" class="headerlink" title="补充说明，前景提要，非常重要："></a>补充说明，前景提要，非常重要：</h2><p>框架的第一个入口就是根目录下的index.html，以下是第二个入口</p><p>再说一个：在config文件夹下的index.js中</p><pre class=" language-javascript"><code class="language-javascript">    notifyOnErrors<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    poll<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// https://webpack.js.org/configuration/dev-server/#devserver-watchoptions-</span>    <span class="token comment" spellcheck="true">// Use Eslint Loader?</span>    <span class="token comment" spellcheck="true">// If true, your code will be linted during bundling and</span>    <span class="token comment" spellcheck="true">// linting errors and warnings will be shown in the console.</span>    useEslint<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//将这个改为false，默认为true</span>    <span class="token comment" spellcheck="true">// If true, eslint errors and warnings will also be shown in the error overlay</span>    <span class="token comment" spellcheck="true">// in the browser.</span>    showEslintErrorsInOverlay<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></code></pre><p>而后的dev.env.js文件可以给我们修改访问后端接口的地址</p><p>在src目录中：</p><p>api：定义调用方法</p><p>assets:静态资源</p><p>components:额外的插件</p><p>icons:相关的图标</p><p>router：路由</p><p>store：脚本文件</p><p>styles：样式文件</p><p>utils：工具</p><p>views：具体页面</p><h2 id="一、后台系统路由实现分析"><a href="#一、后台系统路由实现分析" class="headerlink" title="一、后台系统路由实现分析"></a>一、后台系统路由实现分析</h2><h2 id="1、入口文件中调用路由"><a href="#1、入口文件中调用路由" class="headerlink" title="1、入口文件中调用路由"></a>1、入口文件中调用路由</h2><p>src/main.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token operator">...</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span> <span class="token comment" spellcheck="true">//引入路由模块</span><span class="token operator">...</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//挂载路由</span>  store<span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="2、路由模块中定义路由"><a href="#2、路由模块中定义路由" class="headerlink" title="2、路由模块中定义路由"></a>2、路由模块中定义路由</h2><p>src/router/index.js</p><pre><code>......export const constantRouterMap = [  ......]export default new Router({  ......  routes: constantRouterMap})    </code></pre><h2 id="二、路由定义"><a href="#二、路由定义" class="headerlink" title="二、路由定义"></a>二、路由定义</h2><h2 id="1、复制icon图标"><a href="#1、复制icon图标" class="headerlink" title="1、复制icon图标"></a>1、复制icon图标</h2><p>将vue-element-admin/src/icons/svg 中的图标复制到 guli-admin项目中</p><h2 id="2、修改路由"><a href="#2、修改路由" class="headerlink" title="2、修改路由"></a>2、修改路由</h2><p>修改 src/router/index.js 文件，重新定义constantRouterMap</p><p><strong>注意：</strong>每个路由的name不能相同</p><pre><code> export const constantRouterMap = [  { path: &#39;/login&#39;, component: () =&gt; import(&#39;@/views/login/index&#39;), hidden: true },  { path: &#39;/404&#39;, component: () =&gt; import(&#39;@/views/404&#39;), hidden: true },  // 首页  {    path: &#39;/&#39;,    component: Layout,    redirect: &#39;/dashboard&#39;,    name: &#39;Dashboard&#39;,    children: [{      path: &#39;dashboard&#39;,      component: () =&gt; import(&#39;@/views/dashboard/index&#39;),      meta: { title: &#39;谷粒学院后台首页&#39;, icon: &#39;dashboard&#39; }    }]  },  // 讲师管理  {    path: &#39;/edu/teacher&#39;,    component: Layout,    redirect: &#39;/edu/teacher/list&#39;,    name: &#39;Teacher&#39;,    meta: { title: &#39;讲师管理&#39;, icon: &#39;peoples&#39; },    children: [      {        path: &#39;list&#39;,        name: &#39;EduTeacherList&#39;,        component: () =&gt; import(&#39;@/views/edu/teacher/list&#39;),        meta: { title: &#39;讲师列表&#39; }      },      {        path: &#39;create&#39;,        name: &#39;EduTeacherCreate&#39;,        component: () =&gt; import(&#39;@/views/edu/teacher/form&#39;),        meta: { title: &#39;添加讲师&#39; }      },      {        path: &#39;edit/:id&#39;,        name: &#39;EduTeacherEdit&#39;,        component: () =&gt; import(&#39;@/views/edu/teacher/form&#39;),        meta: { title: &#39;编辑讲师&#39;, noCache: true },        hidden: true      }    ]  },  { path: &#39;*&#39;, redirect: &#39;/404&#39;, hidden: true }]</code></pre><h2 id="3、创建vue组件"><a href="#3、创建vue组件" class="headerlink" title="3、创建vue组件"></a>3、创建vue组件</h2><p>在src/views文件夹下创建以下文件夹和文件</p><p><img src="file:///G:/%E6%A1%8C%E9%9D%A2/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E4%B8%BA%E7%9F%A5%E7%AC%94%E8%AE%B0/temp/82f8e1bf-d2ff-411b-91e3-601c84844cd7/128/index_files/105c6a93-efd3-4e7b-937a-d46c202b7084.png" alt="img"></p><h2 id="4、form-vue"><a href="#4、form-vue" class="headerlink" title="4、form.vue"></a>4、form.vue</h2><pre><code>&lt;template&gt;  &lt;div class=&quot;app-container&quot;&gt;    讲师表单  &lt;/div&gt;&lt;/template&gt;</code></pre><h2 id="5、list-vue"><a href="#5、list-vue" class="headerlink" title="5、list.vue"></a>5、list.vue</h2><pre><code>&lt;template&gt;  &lt;div class=&quot;app-container&quot;&gt;    讲师列表  &lt;/div&gt;&lt;/template&gt;</code></pre><h1 id="一、项目中的-Easy-Mock"><a href="#一、项目中的-Easy-Mock" class="headerlink" title="一、项目中的**Easy Mock**"></a><strong>一、项目中的**</strong>Easy Mock**</h1><p>config/dev.env.js 中BASE_API 为项目的easymock地址，目前具有模拟登录、登出、获取用户信息的功能</p><pre><code>BASE_API: &#39;&quot;https://easy-mock.com/mock/5950a2419adc231f356a6636/vue-admin&quot;&#39;,</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><strong>登录：</strong>/user/login</p><p><strong>获取用户信息：</strong>/user/info?token=admin</p><p><strong>登出：</strong>/user/logout</p><p>config/dev.env.js，只有一个api地址的配置位置，而我们实际的后端有很多微服务，所以接口地址有很多，</p><p>我们可以使用nginx反向代理让不同的api路径分发到不同的api服务器中</p><h1 id="二、配置nginx反向代理"><a href="#二、配置nginx反向代理" class="headerlink" title="二、配置nginx反向代理"></a><strong>二、配置nginx反向代理</strong></h1><h2 id="1、安装window版的nginx"><a href="#1、安装window版的nginx" class="headerlink" title="1、安装window版的nginx"></a>1、安装window版的nginx</h2><p>将nginx-1.12.0.zip解压到开发目录中</p><p>如：E:\development\nginx-1.12.0-guli-api</p><p>双击nginx.exe运行nginx</p><p>访问：localhost</p><h2 id="2、配置nginx代理"><a href="#2、配置nginx代理" class="headerlink" title="2、配置nginx代理"></a>2、配置nginx代理</h2><p>在Nginx中配置对应的微服务服务器地址即可</p><p>注意：最好修改默认的 80端口到81</p><pre><code>http {    server {        listen       81;        ......    }，    ......    server {        listen 8201;        server_name localhost;        location ~ /edu/ {                        proxy_pass http://localhost:8101;        }        location ~ /user/ {                rewrite /(.+)$ /mock/5950a2419adc231f356a6636/vue-admin/$1  break;              proxy_pass https://www.easy-mock.com;        }    }}</code></pre><h2 id="3、重启nginx"><a href="#3、重启nginx" class="headerlink" title="3、重启nginx"></a><strong>3、重启nginx</strong></h2><pre><code>nginx -s reload</code></pre><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><p>访问讲师列表接口：<a href="http://localhost:8201/admin/edu/teacher" target="_blank" rel="noopener">http://localhost:8201/admin/edu/teacher</a></p><p>访问获取用户信息接口：<a href="http://localhost:8201/user/info?token=admin" target="_blank" rel="noopener">http://localhost:8201/user/info?token=admin</a></p><h1 id="三、配置开发环境"><a href="#三、配置开发环境" class="headerlink" title="三、配置开发环境"></a>三、配置开发环境</h1><h2 id="1、修改config-dev-env-js"><a href="#1、修改config-dev-env-js" class="headerlink" title="1、修改config/dev.env.js"></a>1、修改config/dev.env.js</h2><pre><code>BASE_API: &#39;&quot;http://127.0.0.1:8201&quot;&#39;</code></pre><h2 id="2、重启前端程序"><a href="#2、重启前端程序" class="headerlink" title="2、重启前端程序"></a><strong>2、重启前端程序</strong></h2><p>修改配置文件后，需要手动重启前端程序一、分页列表</p><h2 id="1、定义api"><a href="#1、定义api" class="headerlink" title="1、定义api"></a>1、定义api</h2><p>创建文件 src/api/edu/teacher.js</p><pre><code>import request from &#39;@/utils/request&#39;const api_name = &#39;/admin/edu/teacher&#39;export default {  getPageList(page, limit, searchObj) {    return request({      url: `${api_name}/${page}/${limit}`,      method: &#39;get&#39;,      data: searchObj    })  }}</code></pre><h2 id="2、初始化vue组件"><a href="#2、初始化vue组件" class="headerlink" title="2、初始化vue组件"></a>2、初始化vue组件</h2><p>src/views/edu/teacher/list.vue</p><pre><code>&lt;template&gt;  &lt;div class=&quot;app-container&quot;&gt;    讲师列表  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import teacher from &#39;@/api/edu/teacher&#39;export default {  data() {// 定义数据      return {}  },  created() { // 当页面加载时获取数据    this.fetchData()  },  methods: {    fetchData() { // 调用api层获取数据库中的数据      console.log(&#39;加载列表&#39;)    }  }}&lt;/script&gt;</code></pre><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><p><strong>3、定义data</strong></p><pre><code>  data() {    return {      listLoading: true, // 是否显示loading信息      list: null, // 数据列表      total: 0, // 总记录数      page: 1, // 页码      limit: 10, // 每页记录数      searchObj: {}// 查询条件    }  },</code></pre><h2 id="4、定义methods"><a href="#4、定义methods" class="headerlink" title="4、定义methods"></a>4、定义methods</h2><pre><code>  methods: {    fetchData(page = 1) { // 调用api层获取数据库中的数据      console.log(&#39;加载列表&#39;)      this.page = page      this.listLoading = true      teacher.getPageList(this.page, this.limit, this.searchObj).then(response =&gt; {        // debugger 设置断点调试        if (response.success === true) {          this.list = response.data.rows          this.total = response.data.total        }        this.listLoading = false      })    }  }</code></pre><h2 id="5、表格渲染"><a href="#5、表格渲染" class="headerlink" title="5、表格渲染"></a>5、表格渲染</h2><pre><code>    &lt;!-- 表格 --&gt;    &lt;el-table      v-loading=&quot;listLoading&quot;      :data=&quot;list&quot;      element-loading-text=&quot;数据加载中&quot;      border      fit      highlight-current-row&gt;      &lt;el-table-column        label=&quot;序号&quot;        width=&quot;70&quot;        align=&quot;center&quot;&gt;        &lt;template slot-scope=&quot;scope&quot;&gt;          {{ (page - 1) * limit + scope.$index + 1 }}        &lt;/template&gt;      &lt;/el-table-column&gt;      &lt;el-table-column prop=&quot;name&quot; label=&quot;名称&quot; width=&quot;80&quot; /&gt;      &lt;el-table-column label=&quot;头衔&quot; width=&quot;80&quot;&gt;        &lt;template slot-scope=&quot;scope&quot;&gt;          {{ scope.row.level===1?'高级讲师':'首席讲师' }}        &lt;/template&gt;      &lt;/el-table-column&gt;      &lt;el-table-column prop=&quot;intro&quot; label=&quot;资历&quot; /&gt;      &lt;el-table-column prop=&quot;gmtCreate&quot; label=&quot;添加时间&quot; width=&quot;160&quot;/&gt;      &lt;el-table-column prop=&quot;sort&quot; label=&quot;排序&quot; width=&quot;60&quot; /&gt;      &lt;el-table-column label=&quot;操作&quot; width=&quot;200&quot; align=&quot;center&quot;&gt;        &lt;template slot-scope=&quot;scope&quot;&gt;          &lt;router-link :to=&quot;&#39;/edu/teacher/edit/&#39;+scope.row.id&quot;&gt;            &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; icon=&quot;el-icon-edit&quot;&gt;修改&lt;/el-button&gt;          &lt;/router-link&gt;          &lt;el-button type=&quot;danger&quot; size=&quot;mini&quot; icon=&quot;el-icon-delete&quot; @click=&quot;removeDataById(scope.row.id)&quot;&gt;删除&lt;/el-button&gt;        &lt;/template&gt;      &lt;/el-table-column&gt;    &lt;/el-table&gt;</code></pre><p>6、分页组件</p><pre><code>   &lt;!-- 分页 --&gt;    &lt;el-pagination      :current-page=&quot;page&quot;      :page-size=&quot;limit&quot;      :total=&quot;total&quot;      style=&quot;padding: 30px 0; text-align: center;&quot;      layout=&quot;total, prev, pager, next, jumper&quot;      @current-change=&quot;fetchData&quot;    /&gt;</code></pre><p>7、顶部查询表单</p><p><strong>注意：</strong></p><p>element-ui的 date-picker组件默认绑定的时间值是默认世界标准时间，和中国时间差8小时</p><p>设置 value-format=”yyyy-MM-dd HH:mm:ss” 改变绑定的值</p><pre><code>    &lt;!--查询表单--&gt;    &lt;el-form :inline=&quot;true&quot; class=&quot;demo-form-inline&quot;&gt;      &lt;el-form-item&gt;        &lt;el-input v-model=&quot;searchObj.name&quot; placeholder=&quot;讲师名&quot;/&gt;      &lt;/el-form-item&gt;      &lt;el-form-item&gt;        &lt;el-select v-model=&quot;searchObj.level&quot; clearable placeholder=&quot;讲师头衔&quot;&gt;          &lt;el-option :value=&quot;1&quot; label=&quot;高级讲师&quot;/&gt;          &lt;el-option :value=&quot;2&quot; label=&quot;首席讲师&quot;/&gt;        &lt;/el-select&gt;      &lt;/el-form-item&gt;      &lt;el-form-item label=&quot;添加时间&quot;&gt;        &lt;el-date-picker          v-model=&quot;searchObj.begin&quot;          type=&quot;datetime&quot;          placeholder=&quot;选择开始时间&quot;          value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;          default-time=&quot;00:00:00&quot;        /&gt;      &lt;/el-form-item&gt;      &lt;el-form-item&gt;        &lt;el-date-picker          v-model=&quot;searchObj.end&quot;          type=&quot;datetime&quot;          placeholder=&quot;选择截止时间&quot;          value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;          default-time=&quot;00:00:00&quot;        /&gt;      &lt;/el-form-item&gt;      &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot; @click=&quot;fetchData()&quot;&gt;查询&lt;/el-button&gt;      &lt;el-button type=&quot;default&quot; @click=&quot;resetData()&quot;&gt;清空&lt;/el-button&gt;    &lt;/el-form&gt;</code></pre><p>清空方法</p><pre><code>resetData() {    this.searchObj = {}    this.fetchData()}</code></pre><h2 id="8、测试"><a href="#8、测试" class="headerlink" title="8、测试"></a>8、测试</h2><h1 id="二、删除"><a href="#二、删除" class="headerlink" title="二、删除"></a>二、删除</h1><h2 id="1、定义api-1"><a href="#1、定义api-1" class="headerlink" title="1、定义api"></a>1、定义api</h2><p>src/api/edu/teacher.js</p><pre><code>removeById(teacherId) {    return request({        url: `${api_name}/${teacherId}`,        method: &#39;delete&#39;    })}</code></pre><h2 id="2、定义methods"><a href="#2、定义methods" class="headerlink" title="2、定义methods"></a>2、定义methods</h2><p>src/views/edu/teacher/list.vue</p><p>使用MessageBox 弹框组件</p><pre><code>removeDataById(id) {    // debugger    // console.log(memberId)    this.$confirm(&#39;此操作将永久删除该记录, 是否继续?&#39;, &#39;提示&#39;, {        confirmButtonText: &#39;确定&#39;,        cancelButtonText: &#39;取消&#39;,        type: &#39;warning&#39;    }).then(() =&gt; {        return teacher.removeById(id)    }).then(() =&gt; {        this.fetchData()        this.$message({            type: &#39;success&#39;,            message: &#39;删除成功!&#39;        })    }).catch((response) =&gt; { // 失败        if (response === &#39;cancel&#39;) {            this.$message({                type: &#39;info&#39;,                message: &#39;已取消删除&#39;            })        } else {            this.$message({                type: &#39;error&#39;,                message: &#39;删除失败&#39;            })        }    })}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;yblog&quot;&gt;&lt;a href=&quot;#yblog&quot; class=&quot;headerlink&quot; title=&quot;yblog&quot;&gt;&lt;/a&gt;yblog&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;基于SpringBoot和Vue的前后端分离项目  &lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
    
      <category term="yblog" scheme="http://yan_han_guang.gitee.io/tags/yblog/"/>
    
      <category term="SpringBoot" scheme="http://yan_han_guang.gitee.io/tags/SpringBoot/"/>
    
      <category term="SpringCloud" scheme="http://yan_han_guang.gitee.io/tags/SpringCloud/"/>
    
      <category term="vue" scheme="http://yan_han_guang.gitee.io/tags/vue/"/>
    
      <category term="mybatis plus" scheme="http://yan_han_guang.gitee.io/tags/mybatis-plus/"/>
    
      <category term="前后端分离" scheme="http://yan_han_guang.gitee.io/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>青缃坊</title>
    <link href="http://yan_han_guang.gitee.io/2020/05/03/%E9%9D%92%E7%BC%83%E5%9D%8A/"/>
    <id>http://yan_han_guang.gitee.io/2020/05/03/%E9%9D%92%E7%BC%83%E5%9D%8A/</id>
    <published>2020-05-03T07:32:32.000Z</published>
    <updated>2020-06-11T14:54:04.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静斋狭轩陋阁，来宾请允我娓娓道来。"><a href="#静斋狭轩陋阁，来宾请允我娓娓道来。" class="headerlink" title="静斋狭轩陋阁，来宾请允我娓娓道来。"></a>静斋狭轩陋阁，来宾请允我娓娓道来。</h1><h3 id="2020-06-11-晴"><a href="#2020-06-11-晴" class="headerlink" title="2020-06-11 晴"></a>2020-06-11 晴</h3><p>今天讲个关于“遗憾”的话题。</p><p>你说，一辈子有哪些事情是放不下的，若非是对人间无望，就连庙观的“戒尘”①也守着不肯放下的“清规戒律”。</p><p>我又是什么，放不下的可真多，今年大二就进入尾声了，校园里组织的活动还是基本不参加，圈子很窄，日子很平淡无奇。这时候往往会想起高中的日子，没错，那个你们被高考恐惧支配的学生时代，不过我倒是不觉得得那个时候有什么辛苦的，实话说还比不上我大学期间学习的辛劳。</p><p>或许因为广州推行的“素质教育”吧，不补课，非常人性化的作息，没有那种题海的硬性要求，学校还有丰富的社团活动，校园活动，哎~可惜当初刚进高一的时候就对那所学校“嗤之以鼻”，认为毕业后将对那所学校彻底遗忘，事实证明——真香！</p><p>倒不是忘不了学校，大概是忘不了人吧。学校我的确自毕业后再无踏足，也不甚想念，但是那段日子却真很难从记忆中抹去。邂逅的人，身陷的囹圄，来不及说的“抱歉”，还有说不出口的“花间词”。</p><p>我遗憾些什么呢，遗憾两人数次的那走廊拐角的对视，分明有“意”，我总是故作“无情”，说到底，是永远走不出的“卑微”。但若是时光流转，重来一次，我的确还是那个选择，这并不是傻，是我真的走不出的“心境”。</p><p>因为或许这样子，我才不会认得清自己的模样，也因为没有迷失，才能成为今天的样子吧。</p><p>①戒尘：用以指代清修戒律，不染红尘的求佛修道人士。</p><h3 id="2020-05-30-多云"><a href="#2020-05-30-多云" class="headerlink" title="2020-05-30 多云"></a>2020-05-30 多云</h3><p>好久。</p><h3 id="2020-05-17-多云"><a href="#2020-05-17-多云" class="headerlink" title="2020-05-17 多云"></a>2020-05-17 多云</h3><p>晨辉沐地后和小学同学相聚一起，还是我们四个，亦永远是我们四个。沿着珠江街景走一遭，算而今我们几个小子相识不觉已过去十载有余了，如今皆不是意气风发，哈哈哈……</p><p>友情便是如此，谈笑间恨光阴不眷，临别际叹此日无多，相顾无言胜过只言片语，只珍当下。话述难尽，言短却丰实。</p><h3 id="2020-05-03-晴天"><a href="#2020-05-03-晴天" class="headerlink" title="2020-05-03 晴天"></a>2020-05-03 晴天</h3><p>有点嗜睡，最近在疯狂赶项目，有点荒弃了作业与爱好，真的过意不去了。</p><p>或许解压的东西也就只有自己的音乐歌单吧，喜欢往来的游侠们能喜欢我为你们提供的歌单。</p><p>最后嘛，在timing上打卡也有段时间了，那或许的确有督促人学习的效用，“甲鱼”道友也真勤奋了，我甚至都比她起得晚，望开学后尚能同道，多年后若我度扬州之域，愿能与卿共饮！</p><h3 id="2020-04-24-小雨转阴"><a href="#2020-04-24-小雨转阴" class="headerlink" title="2020-04-24 小雨转阴"></a>2020-04-24 小雨转阴</h3><p>最近欠下的作业好多，没时间写自己的新书，其实更多是因为近日的各种压力导致自己的没法继续完成。</p><p>这些天看到了群里的老乡谈论着一些歌手，那些我在高中时迷恋的古风歌曲，哎又是那满满当当的回忆杀，曾经也梦想着在大学里填词作曲来一首，后来也的确用钢琴小谱了一首，我很菜的！</p><p>但也在那时了解到，并不是好听的歌曲很少，而是那些耐人循听的歌曲常常被如今的“快歌”淹没。</p><p>最后，这些天用了个timing软件，一个我高三前在用的学习监督软件，一晃三年，已经不是当初的界面，所有“道友”都不在线上了，好在新认识个道友，希望这个假期大家互相监督学习下去吧。</p><h3 id="2020-04-18-晴"><a href="#2020-04-18-晴" class="headerlink" title="2020-04-18 晴"></a>2020-04-18 晴</h3><h4 id="关于兴趣爱好"><a href="#关于兴趣爱好" class="headerlink" title="关于兴趣爱好"></a>关于兴趣爱好</h4><p><img src="https://s1.ax1x.com/2020/04/18/JehOu4.md.jpg" alt="第二张彩铅画"><br>收拾东西的时候有一本《草稿本》吸引到了我，那是刚刚高考完自己开的一本册子。用到的彩铅是一盒放了4年干瘪的彩铅，但当时我决定用它做一点有意义的事情。</p><p>并没有学过绘画，自认为画得很丑，画风也很窄，只会人物画。</p><p>作者很怂，从来都不敢太恋爱，但人是凡夫俗子，怎么可能没有点小心思，当初见到了一个女孩子，也不说是为何心动了，但她在六楼，我在二楼，两年的时间，我们从来都不认识彼此，或者说是她从来都不认识我吧。。</p><p>高考后自知再无相见了，那个女孩在毕业典礼后确实也没有见到了，遗憾一直存在心中，但幸运的是，高考前学校布置考场的时候，我跑遍了整个高中所有班级，找到了那个叫做“张琦”的女孩，最后看了一眼她的准考证的证件照。也就是这一眼让我之后回家一笔画出了上面这幅图。</p><p>确实很幸运，当初边话这幅画边听着《山外小楼夜听雨》，画得很哽咽，画不出本人，感觉非常丑，甚至一度放弃，但倔强与不留遗憾的心促使我一遍过地完笔，如今看来真的画不出她的一分故色，但无论如何，它承载着当时我的全部。</p><p>有没有很奇怪，一个完全不会画画的人画一个自己想画的人竟然能够一次过？事实上当然不是，在此之前我还画过一张《鞠婧祎》,也不上传了，毕竟占篇幅。当然了，其实早在3年前，又恰好是中考的时候，我开始尝试了简笔画，在此之前我的画画能力连幼儿园都不如，有多差呢……就是那种超级畸形的涂鸦……不过中考之后开始喜欢古风的东西，想把电视剧里好看的人物画下了，而且希望是那种2开的超大画，于是便有了如下的画：<br><img src="https://s1.ax1x.com/2020/04/18/JehhHs.jpg" alt="风四娘"></p><p>后来也陆陆续续地画了很多人物，可惜的是，自从上了大学封笔后再也没有画过画了，用PS画的不算。绘画就此永远成了兴趣爱好，致我曾逝去的中学时光。</p><h3 id="2020-04-17-晴"><a href="#2020-04-17-晴" class="headerlink" title="2020-04-17 晴"></a>2020-04-17 晴</h3><p>几个月前我跟我的编辑说考虑不签约的事情，编辑没有理我，几个月后在我以为那本小说可以不写的时候，那个网站发来了一份邮件……我最终还是没能逃过被签约，但是我真的已经没空，也不想去写那本小说了。</p><p>写了两年多网络小说，渐渐了解了这块“深水”，也明白了自己喜欢的是“文学”，而非“娱乐”。</p><p>现在嘛，我从来没有违约过，那本小说自从我停更了后就下架了，如果我一直不更应该也算违约了吧，你们说我会受到什么影响吗？</p><h3 id="2020-04-14-多云"><a href="#2020-04-14-多云" class="headerlink" title="2020-04-14 多云"></a>2020-04-14 多云</h3><p>有一些人吧，为什么泪点就那么低呢？因为一曲令人共鸣的音乐，因为一幕跨越了数十年的似曾相识，或是因为一句话，一句本不该在此刻听到的话。</p><p> 路过母校的门口，于是才发觉自己再也不能在走廊的拐角那儿等喜欢的人。清晨六、七点的暖阳，蓝绿紫墨的校服，看着他/她们擦肩而过时言笑欢颜，我已经把青春留在了那。十八岁后与这个学校的距离只不过是一个校门，却是再也回不去的距离。</p><p>没什么，今天只是重新看了一遍《哪吒》，然后就有泪了，一个大男人当然不会哭，但是酸溜溜的却也是现实。</p><h3 id="2020-04-12-晴"><a href="#2020-04-12-晴" class="headerlink" title="2020-04-12 晴"></a>2020-04-12 晴</h3><p>去了一趟“广州图书馆”，这是我最喜欢的地方之一，大概有多好呢，我的读者证可以借20本，可以续期多次，哈哈这里有大图书又新又丰富，很容易就能找到自己中意的书，我要是当初报志愿稳一点就能留在广州读大学了，现在后悔死了……</p><h3 id="2020-04-11-阴"><a href="#2020-04-11-阴" class="headerlink" title="2020-04-11 阴"></a>2020-04-11 阴</h3><p>今天偷偷看了“舞蹈风暴”，我虽然是教“breaking”的老师，但是也会几乎所有的舞种，如果让我挑一个除了breaking之外最喜欢的舞蹈，大概就属“中国舞”了。</p><p>看着里边的专业舞者们，李响，王雪柔，张艺凡他/她们在舞台上表现的，出来赞叹不已，还有无限的感慨。</p><p>我因为在田径队的训练将双膝前十字韧带弄伤后，历时一年多，自我感觉依然十分的不好，大概也能预料到自己几乎此后都是这般伤遗。</p><p>膝盖没有失去了支撑的力量与柔韧性，无论是舞蹈还是田径类体育都不复当年之态，说句实在的，甚至不比常人。</p><p>最后只能说句“曾经年少轻狂，落得后生遗殇。”</p><h3 id="2020-04-10-晴"><a href="#2020-04-10-晴" class="headerlink" title="2020-04-10 晴"></a>2020-04-10 晴</h3><p>广州的天气很好，我却没从病里出来，看了很多的新闻，听见了国人对外人的“异言”。我们常说国人在外受到怎样的种族歧视，我们常常为此而愤慨，但当视角一换，是否能够告诉自己不该成为当初自己讨厌的人……</p><p>当我看到地铁了有外国人的车厢几乎没有多少国人的时候，当我看见那些疫情期间我们施以援手的国度却反诬我们的时刻……我们都知道这是个例，但人言可畏，不是吗？</p><p>我们一直活在这个时代英雄的保护之下，无外乎全世界的人，但英雄从来都是过去式，下一秒的你可还记得他？</p><p> 特殊时期，当我国“抗疫”取得成效时，听着诸多自媒体里那洋溢着自豪的褒扬，幸灾乐祸的言论已经泛滥开来，只觉得“谦逊”才是正当之心。</p><p>最后，只希望但凡有识之士认清，现在的中华民族伟大复兴还有很长一段路要走。自媒体人鼓吹的各种豪言中国世界论调几尽是博你一笑，跟着无知舆论节奏走只会使人眼界愈加狭小。当有天出现了一篇“中国救了世界而世界开始清算中国”的言论是，会作何感想？</p><p>说实在的，我挺讨厌那些媒体的，利益使然不顾后果的报道受害的何止是国家，还有这个国家的子民，更可怕的是跟风的潮流，引领着无知者彻杀着人心。截止今日已经有一点苗头了，看到了几个国家的重要政治人物相继发言反诬中国的言论，看到了自己国家尽力帮助的地域中出现不少的国民对这个人的排斥……真不希望疫情过后的一天，世界对中国开了一个天大的“笑话”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;静斋狭轩陋阁，来宾请允我娓娓道来。&quot;&gt;&lt;a href=&quot;#静斋狭轩陋阁，来宾请允我娓娓道来。&quot; class=&quot;headerlink&quot; title=&quot;静斋狭轩陋阁，来宾请允我娓娓道来。&quot;&gt;&lt;/a&gt;静斋狭轩陋阁，来宾请允我娓娓道来。&lt;/h1&gt;&lt;h3 id=&quot;2020-
      
    
    </summary>
    
    
    
      <category term="日记" scheme="http://yan_han_guang.gitee.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>vue+node快速入门</title>
    <link href="http://yan_han_guang.gitee.io/2020/04/14/vue-node%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://yan_han_guang.gitee.io/2020/04/14/vue-node%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2020-04-14T12:54:57.000Z</published>
    <updated>2020-04-15T02:08:51.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端知识快速整理"><a href="#前端知识快速整理" class="headerlink" title="前端知识快速整理"></a>前端知识快速整理</h1><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="一、ECMAScript-6-简介"><a href="#一、ECMAScript-6-简介" class="headerlink" title="一、ECMAScript 6 简介"></a>一、ECMAScript 6 简介</h3><p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。<br>1、ECMAScript 和 JavaScript 的关系<br>一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？</p><p>要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。</p><p>因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 Jscript 和 ActionScript）</p><p>2、ES6 与 ECMAScript 2015 的关系<br>ECMAScript 2015（简称 ES2015）这个词，也是经常可以看到的。它与 ES6 是什么关系呢？</p><p>2011 年，ECMAScript 5.1 版发布后，就开始制定 6.0 版了。因此，ES6 这个词的原意，就是指 JavaScript 语言的下一个版本。</p><p>ES6 的第一个版本，在 2015 年 6 月发布，正式名称是《ECMAScript 2015 标准》（简称 ES2015）。</p><p>2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小，基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。</p><p>因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。本书中提到 ES6 的地方，一般是指 ES2015 标准，但有时也是泛指“下一代 JavaScript 语言”。</p><h3 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h3><p>ES标准中不包含 DOM 和 BOM的定义，只涵盖基本数据类型、关键字、语句、运算符、内建对象、内建函数等通用语法。</p><p>本部分只学习前端开发中ES6的最少必要知识，方便后面项目开发中对代码的理解。</p><p>1、let声明变量<br>创建 let.html</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// var 声明的变量没有局部作用域</span><span class="token comment" spellcheck="true">// let 声明的变量  有局部作用域</span><span class="token punctuation">{</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ReferenceError: b is not defined</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// var 可以声明多次</span><span class="token comment" spellcheck="true">// let 只能声明一次</span><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Identifier 'n' has already been declared</span></code></pre><p>2、const声明常量（只读变量）<br>创建 const.html</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1、声明之后不允许改变    </span><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token string">"3.1415926"</span>PI <span class="token operator">=</span> <span class="token number">3</span>  <span class="token comment" spellcheck="true">// TypeError: Assignment to constant variable.</span><span class="token comment" spellcheck="true">// 2、一但声明必须初始化，否则会报错</span><span class="token keyword">const</span> MY_AGE  <span class="token comment" spellcheck="true">// SyntaxError: Missing initializer in const declaration</span></code></pre><p>3、解构赋值<br>创建 解构赋值.html<br>解构赋值是对赋值运算符的扩展。</p><p>他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。</p><p>在代码书写上简洁且易读，语义更加清晰明了；也方便了复杂对象中数据字段获取。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1、数组解构</span><span class="token comment" spellcheck="true">// 传统</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ES6</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2、对象解构</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'Helen'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 传统</span><span class="token keyword">let</span> name1 <span class="token operator">=</span> user<span class="token punctuation">.</span>name<span class="token keyword">let</span> age1 <span class="token operator">=</span> user<span class="token punctuation">.</span>ageconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name1<span class="token punctuation">,</span> age1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ES6</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span>  user<span class="token comment" spellcheck="true">//注意：结构的变量必须是user中的属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span></code></pre><p>4、模板字符串<br>创建 模板字符串.html<br>模板字符串相当于加强版的字符串，用反引号 `,除了作为普通字符串，还可以用来定义多行字符串，还可以在字符串中加入变量和表达式。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1、多行字符串</span><span class="token keyword">let</span> string1 <span class="token operator">=</span>  <span class="token template-string"><span class="token string">`Hey,can you stop angry now?`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Hey,</span><span class="token comment" spellcheck="true">// can you stop angry now?</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 2、字符串插入变量和表达式。变量名写在 ${} 中，${} 中可以放入 JavaScript 表达式。</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"Mike"</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">27</span><span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token template-string"><span class="token string">`My Name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token operator">+</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old next year.`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// My Name is Mike,I am 28 years old next year.</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 3、字符串中调用函数</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"have fun!"</span><span class="token punctuation">}</span><span class="token keyword">let</span> string2 <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Game start,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Game start,have fun!</span></code></pre><p>5、声明对象简写<br>创建 声明对象简写.html</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">12</span><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"Amy"</span><span class="token comment" spellcheck="true">// 传统</span><span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>age<span class="token punctuation">:</span> age<span class="token punctuation">,</span> name<span class="token punctuation">:</span> name<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ES6</span><span class="token keyword">const</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span>age<span class="token punctuation">,</span> name<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{age: 12, name: "Amy"}</span></code></pre><p>6、定义方法简写<br>创建 定义方法简写.html</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 传统</span><span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>    sayHi<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hi"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>person1<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"Hi"</span><span class="token comment" spellcheck="true">// ES6</span><span class="token keyword">const</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hi"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>person2<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//"Hi"</span></code></pre><p>7、对象拓展运算符<br>创建 对象拓展运算符.html<br>拓展运算符（…）用于取出参数对象所有可遍历属性然后拷贝到当前对象。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1、拷贝对象</span><span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"Amy"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token keyword">let</span> someone <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>person1 <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someone<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//{name: "Amy", age: 15}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 2、合并对象</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"Amy"</span><span class="token punctuation">}</span><span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>age<span class="token punctuation">,</span> <span class="token operator">...</span>name<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//{age: 15, name: "Amy"}</span></code></pre><p>8、箭头函数<br>创建 箭头函数.html<br>箭头函数提供了一种更加简洁的函数书写方式。基本语法是：<br>参数 =&gt; 函数体</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 传统</span><span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ES6</span><span class="token keyword">var</span> f2 <span class="token operator">=</span> a <span class="token operator">=</span><span class="token operator">></span> aconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 当箭头函数没有参数或者有多个参数，要用 () 括起来。</span><span class="token comment" spellcheck="true">// 当箭头函数函数体有多行语句，用 {} 包裹起来，表示代码块，</span><span class="token comment" spellcheck="true">// 当只有一行语句，并且需要返回结果时，可以省略 {} , 结果会自动返回。</span><span class="token keyword">var</span> f3 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> a<span class="token operator">+</span>b    <span class="token keyword">return</span> result<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 8</span><span class="token comment" spellcheck="true">// 前面代码相当于：</span><span class="token keyword">var</span> f4 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token operator">+</span>b</code></pre><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p>1、Vue.js 是什么<br>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。<br>Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><p>官方网站：<a href="https://cn.vuejs.org" target="_blank" rel="noopener">https://cn.vuejs.org</a></p><p>2、初始Vue.js<br>创建 demo.html</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> id标识vue作用的范围 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 两个大括号嵌套 插值表达式，绑定vue中的data数据 <span class="token operator">--</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"vue.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 创建一个vue对象</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//绑定vue作用的范围</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//定义页面中显示的模型数据</span>            message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></code></pre><p>这就是声明式渲染：Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统<br>这里的核心思想就是没有繁琐的DOM操作，例如jQuery中，我们需要先找到div节点，获取到DOM对象，然后进行一系列的节点操作</p><p>在vs code中创建代码片段：<br>文件 =&gt;  首选项 =&gt; 用户代码片段 =&gt; 新建全局代码片段/或文件夹代码片段：vue-html.code-snippets<br>注意：制作代码片段的时候，字符串中如果包含文件中复制过来的“Tab”键的空格，要换成“空格键”的空格</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token string">"vue htm"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"scope"</span><span class="token punctuation">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>        <span class="token string">"prefix"</span><span class="token punctuation">:</span> <span class="token string">"vuehtml"</span><span class="token punctuation">,</span>        <span class="token string">"body"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">"&lt;!DOCTYPE html>"</span><span class="token punctuation">,</span>            <span class="token string">"&lt;html lang=\"en\">"</span><span class="token punctuation">,</span>            <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token string">"&lt;head>"</span><span class="token punctuation">,</span>            <span class="token string">"    &lt;meta charset=\"UTF-8\">"</span><span class="token punctuation">,</span>            <span class="token string">"    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">"</span><span class="token punctuation">,</span>            <span class="token string">"    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">"</span><span class="token punctuation">,</span>            <span class="token string">"    &lt;title>Document&lt;/title>"</span><span class="token punctuation">,</span>            <span class="token string">"&lt;/head>"</span><span class="token punctuation">,</span>            <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token string">"&lt;body>"</span><span class="token punctuation">,</span>            <span class="token string">"    &lt;div id=\"app\">"</span><span class="token punctuation">,</span>            <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token string">"    &lt;/div>"</span><span class="token punctuation">,</span>            <span class="token string">"    &lt;script src=\"vue.min.js\">&lt;/script>"</span><span class="token punctuation">,</span>            <span class="token string">"    &lt;script>"</span><span class="token punctuation">,</span>            <span class="token string">"        new Vue({"</span><span class="token punctuation">,</span>            <span class="token string">"            el: '#app',"</span><span class="token punctuation">,</span>            <span class="token string">"            data: {"</span><span class="token punctuation">,</span>            <span class="token string">"                $1"</span><span class="token punctuation">,</span>            <span class="token string">"            }"</span><span class="token punctuation">,</span>            <span class="token string">"        })"</span><span class="token punctuation">,</span>            <span class="token string">"    &lt;/script>"</span><span class="token punctuation">,</span>            <span class="token string">"&lt;/body>"</span><span class="token punctuation">,</span>            <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token string">"&lt;/html>"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"my vue template in html"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="二、基本语法-1"><a href="#二、基本语法-1" class="headerlink" title="二、基本语法"></a>二、基本语法</h3><p>1、基本数据渲染和指令<br>创建 01-基本数据渲染和指令.html<br>你看到的 v-bind 特性被称为指令。指令带有前缀 v-<br>除了使用插值表达式进行数据渲染，也可以使用 v-bind指令，它的简写的形式就是一个冒号（:）</p><pre class=" language-javascript"><code class="language-javascript">data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    content<span class="token punctuation">:</span> <span class="token string">'我是标题'</span><span class="token punctuation">,</span>    message<span class="token punctuation">:</span> <span class="token string">'页面加载于 '</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 如果要将模型数据绑定在html属性中，则使用 v<span class="token operator">-</span>bind 指令     此时title中显示的是模型数据<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>h1 v<span class="token operator">-</span>bind<span class="token punctuation">:</span>title<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span>bind 指令的简写形式： 冒号（<span class="token punctuation">:</span>） <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>h1 <span class="token punctuation">:</span>title<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></code></pre><p>2、双向数据绑定<br>创建 02-双向数据绑定.html<br>双向数据绑定和单向数据绑定：使用 v-model 进行双向数据绑定</p><pre class=" language-javascript"><code class="language-javascript">data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    searchMap<span class="token punctuation">:</span><span class="token punctuation">{</span>        keyWord<span class="token punctuation">:</span> <span class="token string">'hhh'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span>bind<span class="token punctuation">:</span>value只能进行单向的数据渲染 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>bind<span class="token punctuation">:</span>value<span class="token operator">=</span><span class="token string">"searchMap.keyWord"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span>model 可以进行双向的数据绑定  <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"searchMap.keyWord"</span><span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>您要查询的是：<span class="token punctuation">{</span><span class="token punctuation">{</span>searchMap<span class="token punctuation">.</span>keyWord<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><p>3、事件<br>创建 03-事件.html<br>需求：点击查询按钮，按照输入框中输入的内容查找公司相关信息<br>在前面的例子基础上，data节点中增加 result，增加 methods节点 并定义 search方法</p><pre class=" language-javascript"><code class="language-javascript">data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     searchMap<span class="token punctuation">:</span><span class="token punctuation">{</span>         keyWord<span class="token punctuation">:</span> <span class="token string">'尚硅谷'</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//查询结果</span>     result<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'search'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//TODO</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>html中增加 button 和 p<br>使用 v-on 进行数件处理，v-on:click 表示处理鼠标点击事件，事件调用的方法定义在 vue 对象声明的 methods 节点中</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span>on 指令绑定事件，click指定绑定的事件类型，事件发生时调用vue中methods节点中定义的方法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token punctuation">:</span>click<span class="token operator">=</span><span class="token string">"search()"</span><span class="token operator">></span>查询<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token number">4</span><span class="token operator">&lt;</span>p<span class="token operator">></span>您要查询的是：<span class="token punctuation">{</span><span class="token punctuation">{</span>searchMap<span class="token punctuation">.</span>keyWord<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span>a v<span class="token operator">-</span>bind<span class="token punctuation">:</span>href<span class="token operator">=</span><span class="token string">"result.site"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>result<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><p>完善search方法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'search'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"title"</span><span class="token punctuation">:</span><span class="token string">"尚硅谷"</span><span class="token punctuation">,</span>        <span class="token string">"site"</span><span class="token punctuation">:</span><span class="token string">"http://www.atguigu.com"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>简写</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span>on 指令的简写形式 @ <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"search()"</span><span class="token operator">></span>查询<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></code></pre><p>4、修饰符<br>创建 04-修饰符.html<br>修饰符 (Modifiers) 是以半角句号（.）指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。<br>例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：<br>即阻止事件原本的默认行为</p><pre class=" language-javascript"><code class="language-javascript">data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    user<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 修饰符用于指出一个指令应该以特殊方式绑定。     这里的 <span class="token punctuation">.</span>prevent 修饰符告诉 v<span class="token operator">-</span>on 指令对于触发的事件调用js的 event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：     即阻止表单提交的默认行为 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"save"</span> v<span class="token operator">-</span>on<span class="token punctuation">:</span>submit<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">"onSubmit"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"username"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"user.username"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>保存<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'提交表单'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请输入用户名'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5、条件渲染<br>创建 05-条件渲染.html<br>v-if：条件指令</p><pre class=" language-javascript"><code class="language-javascript">data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    ok<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><p>注意：单个复选框绑定到布尔值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"ok"</span><span class="token operator">></span>同意许可协议<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token punctuation">:</span><span class="token keyword">if</span>条件指令：还有v<span class="token operator">-</span><span class="token keyword">else</span>、v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span> 切换开销大 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>h1 v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"ok"</span><span class="token operator">></span><span class="token keyword">if</span>：Lorem ipsum dolor sit amet<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>h1 v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span>no<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></code></pre><p>v-show：条件指令<br>使用v-show完成和上面相同的功能</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token punctuation">:</span>show 条件指令 初始渲染开销大 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>h1 v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"ok"</span><span class="token operator">></span>show：Lorem ipsum dolor sit amet<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>h1 v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"!ok"</span><span class="token operator">></span>no<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></code></pre><p>v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。<br>v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。<br>相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。<br>一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</p><p>6、列表渲染<br>创建 06-列表渲染.html<br>v-for：列表循环指令<br>例1：简单的列表渲染</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1</span>、简单的列表渲染 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"n in 10"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> n <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 如果想获取索引，则使用index关键字，注意，圆括号中的index必须放在后面 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(n, index) in 5"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> n <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> index <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><p>例2：遍历数据列表</p><pre class=" language-javascript"><code class="language-javascript">data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    userList<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span> <span class="token string">'helen'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span> <span class="token string">'peter'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">28</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span> <span class="token string">'andy'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">38</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">2</span>、遍历数据列表 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>table border<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>tr v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in userList"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>tr v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in userList"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span></code></pre><h2 id="Vue-js进阶"><a href="#Vue-js进阶" class="headerlink" title="Vue.js进阶"></a>Vue.js进阶</h2><h3 id="一、组件（重点）"><a href="#一、组件（重点）" class="headerlink" title="一、组件（重点）"></a>一、组件（重点）</h3><p>组件（Component）是 Vue.js 最强大的功能之一。<br>组件可以扩展 HTML 元素，封装可重用的代码。</p><p>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树：<br>1、局部组件<br>创建 01-1-局部组件.html<br>定义组件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 定义局部组件，这里可以定义多个局部组件</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//组件的名字</span>        <span class="token string">'Navbar'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//组件的内容</span>            template<span class="token punctuation">:</span> <span class="token string">'&lt;ul>&lt;li>首页&lt;/li>&lt;li>学员管理&lt;/li>&lt;/ul>'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>使用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Navbar<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Navbar<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>2、全局组件<br>创建 01-2-全局组件.html<br>定义全局组件：components/Navbar.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义全局组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'Navbar'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token string">'&lt;ul>&lt;li>首页&lt;/li>&lt;li>学员管理&lt;/li>&lt;li>讲师管理&lt;/li>&lt;/ul>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Navbar<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Navbar<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"vue.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"components/Navbar.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="二、实例生命周期"><a href="#二、实例生命周期" class="headerlink" title="二、实例生命周期"></a>二、实例生命周期</h3><p><img src="https://img-blog.csdnimg.cn/2020041420240477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Jpa2Ew,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 第一个被执行的钩子方法：实例被创建出来之前执行</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//TypeError: this.show is not a function</span>    <span class="token comment" spellcheck="true">// beforeCreate执行时，data 和 methods 中的 数据都还没有没初始化</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 第二个被执行的钩子方法</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//床前明月光</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//执行show方法</span>    <span class="token comment" spellcheck="true">// created执行时，data 和 methods 都已经被初始化好了！</span>    <span class="token comment" spellcheck="true">// 如果要调用 methods 中的方法，或者操作 data 中的数据，最早，只能在 created 中操作</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 第三个被执行的钩子方法</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{{ message }}</span>    <span class="token comment" spellcheck="true">// beforeMount执行时，模板已经在内存中编辑完成了，尚未被渲染到页面中</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 第四个被执行的钩子方法</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//床前明月光</span>    <span class="token comment" spellcheck="true">// 内存中的模板已经渲染到页面，用户已经可以看见内容</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//===运行中的两个事件</span><span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 数据更新的前一刻</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'界面显示的内容：'</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data 中的 message 数据是：'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// beforeUpdate执行时，内存中的数据已更新，但是页面尚未被渲染</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'界面显示的内容：'</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data 中的 message 数据是：'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// updated执行时，内存中的数据已更新，并且页面已经被渲染</span><span class="token punctuation">}</span></code></pre><h3 id="四、路由"><a href="#四、路由" class="headerlink" title="四、路由"></a>四、路由</h3><p>Vue.js 路由允许我们通过不同的 URL 访问不同的内容。<br>通过 Vue.js 可以实现多视图的单页Web应用（single page web application，SPA）。</p><p>Vue.js 路由需要载入 vue-router 库</p><p>创建 04-路由.html</p><p>1、引入js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"vue.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"vue-router.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>2、编写html</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello App<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用 router<span class="token operator">-</span>link 组件来导航<span class="token punctuation">.</span> <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 通过传入 <span class="token template-string"><span class="token string">`to`</span></span> 属性指定链接<span class="token punctuation">.</span> <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>router<span class="token operator">-</span>link<span class="token operator">></span> 默认会被渲染成一个 <span class="token template-string"><span class="token string">`&lt;a>`</span></span> 标签 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/student"</span><span class="token operator">></span>会员管理<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/teacher"</span><span class="token operator">></span>讲师管理<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 路由出口 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 路由匹配到的组件将渲染在这里 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>3、编写js</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 1. 定义（路由）组件。</span>    <span class="token comment" spellcheck="true">// 可以从其他文件 import 进来</span>    <span class="token keyword">const</span> Welcome <span class="token operator">=</span> <span class="token punctuation">{</span> template<span class="token punctuation">:</span> <span class="token string">'&amp;lt;div&amp;gt;欢迎&amp;lt;/div&amp;gt;'</span> <span class="token punctuation">}</span>    <span class="token keyword">const</span> Student <span class="token operator">=</span> <span class="token punctuation">{</span> template<span class="token punctuation">:</span> <span class="token string">'&amp;lt;div&amp;gt;student list&amp;lt;/div&amp;gt;'</span> <span class="token punctuation">}</span>    <span class="token keyword">const</span> Teacher <span class="token operator">=</span> <span class="token punctuation">{</span> template<span class="token punctuation">:</span> <span class="token string">'&amp;lt;div&amp;gt;teacher list&amp;lt;/div&amp;gt;'</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2. 定义路由</span>    <span class="token comment" spellcheck="true">// 每个路由应该映射一个组件。</span>    <span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> redirect<span class="token punctuation">:</span> <span class="token string">'/welcome'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//设置默认指向的路径</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/welcome'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Welcome <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/student'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Student <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/teacher'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Teacher <span class="token punctuation">}</span>    <span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 3. 创建 router 实例，然后传 `routes` 配置</span>    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        routes <span class="token comment" spellcheck="true">// （缩写）相当于 routes: routes</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 4. 创建和挂载根实例。</span>    <span class="token comment" spellcheck="true">// 从而让整个应用都有路由功能</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        router    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 现在，应用已经启动了！</span></code></pre><h3 id="五、axios"><a href="#五、axios" class="headerlink" title="五、axios"></a>五、axios</h3><p>axios是独立于vue的一个项目，基于promise用于浏览器和node.js的http客户端<br>在浏览器中可以帮助我们完成 ajax请求的发送<br>在node.js中可以向远程接口发送请求<br>获取数据</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"vue.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"axios.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>注意：测试时需要开启后端服务器，并且后端开启跨域访问权限</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"user in userList"</span><span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"vue.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"axios.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//定义变量</span>                userList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//页面渲染之前执行</span>                <span class="token comment" spellcheck="true">//调用定义的方法</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//创建方法</span>                <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//使用axios发生ajax请求</span>                    <span class="token comment" spellcheck="true">//axios.提交方式（“请求接口路径”）</span>                    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"data.json"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//通过response获取具体数据，赋值给定义空数组</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>userList <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>items                            console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userList<span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true">// console.dir(response)</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//请求成功执行then方法</span>                        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//失败执行它</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>控制台查看输出<br>2、显示数据</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token string">"success"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">20000</span><span class="token punctuation">,</span>    <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"成功"</span><span class="token punctuation">,</span>    <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"items"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"lucy"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"mary"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">40</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="六、element-ui："><a href="#六、element-ui：" class="headerlink" title="六、element-ui："></a>六、element-ui：</h3><p>element-ui 是饿了么前端出品的基于 Vue.js的 后台组件库，方便程序员进行页面快速布局和构建<br>官网： <a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN</a><br>创建 06-element-ui.html<br>将element-ui引入到项目<br>1、引入css</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token keyword">import</span> CSS <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"element-ui/lib/theme-chalk/index.css"</span><span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token keyword">import</span> Vue before Element <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"vue.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token keyword">import</span> JavaScript <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"element-ui/lib/index.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>3、编写html</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>button @click<span class="token operator">=</span><span class="token string">"visible = true"</span><span class="token operator">></span>Button<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>dialog <span class="token punctuation">:</span>visible<span class="token punctuation">.</span>sync<span class="token operator">=</span><span class="token string">"visible"</span> title<span class="token operator">=</span><span class="token string">"Hello world"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>Try Element<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>dialog<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>关于.sync的扩展阅读<br><a href="https://www.jianshu.com/p/d42c508ea9de" target="_blank" rel="noopener">https://www.jianshu.com/p/d42c508ea9de</a></p><p>4、编写js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//定义Vue中data的另一种方式</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span> visible<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>1、什么是Node.js<br>简单的说 Node.js 就是运行在服务端的 JavaScript。<br>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p><p>2、Node.js有什么用<br>如果你是一个前端程序员，你不懂得像PHP、Python或Ruby等动态编程语言，然后你想创建自己的服务，那么Node.js是一个非常好的选择。<br>Node.js 是运行在服务端的 JavaScript，如果你熟悉Javascript，那么你将会很容易的学会Node.js。</p><p>当然，如果你是后端程序员，想部署一些高性能的服务，那么学习Node.js也是一个非常好的选择。</p><h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><p>1、下载<br>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><p>中文网：<a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a></p><p>LTS：长期支持版本</p><p>Current：最新版</p><p>2、安装</p><p>3、查看版本</p><pre class=" language-javascript"><code class="language-javascript">node <span class="token operator">-</span>v</code></pre><h3 id="三、快速入门"><a href="#三、快速入门" class="headerlink" title="三、快速入门"></a>三、快速入门</h3><p>1、创建文件夹nodejs<br>2、控制台程序<br>创建 01-控制台程序.js</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello Node.js'</span><span class="token punctuation">)</span></code></pre><p>打开命令行终端：Ctrl + Shift + y<br>进入到程序所在的目录，输入</p><pre class=" language-javascript"><code class="language-javascript">node <span class="token number">01</span><span class="token operator">-</span>控制台程序<span class="token punctuation">.</span>js</code></pre><p>浏览器的内核包括两部分核心：<br>DOM渲染引擎；<br>js解析器（js引擎）<br>js运行在浏览器中的内核中的js引擎内部<br>Node.js是脱离浏览器环境运行的JavaScript程序，基于V8 引擎（Chrome 的 JavaScript的引擎）<br>3、服务器端应用开发（了解）</p><h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><h3 id="一、简介-1"><a href="#一、简介-1" class="headerlink" title="一、简介"></a>一、简介</h3><p>1、什么是NPM<br>NPM全称Node Package Manager，是Node.js包管理工具，是全球最大的模块生态系统，里面所有的模块都是开源免费的；也是Node.js的包管理工具，相当于前端的Maven 。</p><p>2、NPM工具的安装位置<br>我们通过npm 可以很方便地下载js库，管理前端工程。</p><p>Node.js默认安装的npm包和工具的位置：Node.js目录\node_modules</p><p>在这个目录下你可以看见 npm目录，npm本身就是被NPM包管理器管理的一个工具，说明 Node.js已经集成了npm工具</p><pre class=" language-javascript"><code class="language-javascript">#在命令提示符输入 npm <span class="token operator">-</span>v 可查看当前npm版本npm <span class="token operator">-</span>v</code></pre><h3 id="二、使用npm管理项目"><a href="#二、使用npm管理项目" class="headerlink" title="二、使用npm管理项目"></a>二、使用npm管理项目</h3><p>1、创建文件夹npm<br>2、项目初始化</p><pre class=" language-javascript"><code class="language-javascript">#建立一个空文件夹，在命令提示符进入该文件夹  执行命令初始化npm init#按照提示输入相关信息，如果是用默认值则直接回车即可。#name<span class="token punctuation">:</span> 项目名称#version<span class="token punctuation">:</span> 项目版本号#description<span class="token punctuation">:</span> 项目描述#keywords<span class="token punctuation">:</span> <span class="token punctuation">{</span>Array<span class="token punctuation">}</span>关键词，便于用户搜索到我们的项目#最后会生成<span class="token keyword">package</span><span class="token punctuation">.</span>json文件，这个是包的配置文件，相当于maven的pom<span class="token punctuation">.</span>xml#我们之后也可以根据需要进行修改。</code></pre><pre class=" language-javascript"><code class="language-javascript">#如果想直接生成 <span class="token keyword">package</span><span class="token punctuation">.</span>json 文件，那么可以使用命令npm init <span class="token operator">-</span>y</code></pre><p>2、修改npm镜像<br>NPM官方的管理的包都是从 <a href="http://npmjs.com下载的，但是这个网站在国内速度很慢。" target="_blank" rel="noopener">http://npmjs.com下载的，但是这个网站在国内速度很慢。</a><br>这里推荐使用淘宝 NPM 镜像 <a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a> ，淘宝 NPM 镜像是一个完整 npmjs.com 镜像，同步频率目前为 10分钟一次，以保证尽量与官方服务同步。<br>设置镜像地址：</p><pre class=" language-javascript"><code class="language-javascript">#经过下面的配置，以后所有的 npm install 都会经过淘宝的镜像地址下载npm config <span class="token keyword">set</span> registry https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org #查看npm配置信息npm config list</code></pre><p>3、npm install命令的使用</p><pre class=" language-javascript"><code class="language-javascript">#使用 npm install 安装依赖包的最新版，#模块安装的位置：项目目录\node_modules#安装会自动在项目目录下添加 <span class="token keyword">package</span><span class="token operator">-</span>lock<span class="token punctuation">.</span>json文件，这个文件帮助锁定安装包的版本#同时<span class="token keyword">package</span><span class="token punctuation">.</span>json 文件中，依赖包会被添加到dependencies节点下，类似maven中的 <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>dependencies<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>npm install jquery#npm管理的项目在备份和传输的时候一般不携带node_modules文件夹npm install #根据<span class="token keyword">package</span><span class="token punctuation">.</span>json中的配置下载依赖，初始化项目#如果安装时想指定特定的版本npm install jquery@<span class="token number">2.1</span><span class="token punctuation">.</span>x#devDependencies节点：开发时的依赖包，项目打包到生产环境的时候不包含的依赖#使用 <span class="token operator">-</span>D参数将依赖添加到devDependencies节点npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev eslint#或npm install <span class="token operator">-</span>D eslint#全局安装#Node<span class="token punctuation">.</span>js全局安装的npm包和工具的位置：用户目录\AppData\Roaming\npm\node_modules#一些命令行工具常使用全局安装的方式npm install <span class="token operator">-</span>g webpack</code></pre><p>4、其它命令</p><pre class=" language-javascript"><code class="language-javascript">#更新包（更新到最新版本）npm update 包名#全局更新npm update <span class="token operator">-</span>g 包名#卸载包npm uninstall 包名#全局卸载npm uninstall <span class="token operator">-</span>g 包名</code></pre><h2 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h2><h3 id="一、简介-2"><a href="#一、简介-2" class="headerlink" title="一、简介"></a>一、简介</h3><p>Babel是一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行执行。<br>这意味着，你可以现在就用 ES6 编写程序，而不用担心现有环境是否支持。</p><h3 id="二、安装-1"><a href="#二、安装-1" class="headerlink" title="二、安装"></a>二、安装</h3><p>安装命令行转码工具<br>Babel提供babel-cli工具，用于命令行转码。它的安装命令如下：</p><pre class=" language-javascript"><code class="language-javascript">npm install <span class="token operator">--</span>global babel<span class="token operator">-</span>cli</code></pre><p>三、Babel的使用<br>1、初始化项目</p><pre class=" language-javascript"><code class="language-javascript">npm init <span class="token operator">-</span>y</code></pre><p>2、创建文件<br>src/example.js<br>下面是一段ES6代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 转码前</span><span class="token comment" spellcheck="true">// 定义数据</span><span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 将数组的每个元素 +1</span>input <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span></code></pre><p>2、配置.babelrc<br>Babel的配置文件是.babelrc，存放在项目的根目录下，该文件用来设置转码规则和插件，基本格式如下。<br>presets字段设定转码规则，将es2015规则加入 .babelrc：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>3、安装转码器<br>在项目中安装<code>npm install --save-dev babel-preset-es2015</code><br>4、转码</p><pre class=" language-javascript"><code class="language-javascript"># 转码结果写入一个文件mkdir dist1# <span class="token operator">--</span>out<span class="token operator">-</span>file 或 <span class="token operator">-</span>o 参数指定输出文件babel src<span class="token operator">/</span>example<span class="token punctuation">.</span>js <span class="token operator">--</span>out<span class="token operator">-</span>file dist1<span class="token operator">/</span>compiled<span class="token punctuation">.</span>js# 或者babel src<span class="token operator">/</span>example<span class="token punctuation">.</span>js <span class="token operator">-</span>o dist1<span class="token operator">/</span>compiled<span class="token punctuation">.</span>js# 整个目录转码mkdir dist2# <span class="token operator">--</span>out<span class="token operator">-</span>dir 或 <span class="token operator">-</span>d 参数指定输出目录babel src <span class="token operator">--</span>out<span class="token operator">-</span>dir dist2# 或者babel src <span class="token operator">-</span>d dist2</code></pre><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>一、什么是模块化开发<br>传统非模块化开发有如下的缺点：<br>命名冲突<br>文件依赖</p><p>模块化规范：<br>CommonJS模块化规范<br>ES6模块化规范<br>二、CommonJS模块规范<br>每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。</p><p>………………这部分内容上网查吧，累了。</p><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><h3 id="一、什么是Webpack"><a href="#一、什么是Webpack" class="headerlink" title="一、什么是Webpack"></a>一、什么是Webpack</h3><p>Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p><p>从图中我们可以看出，Webpack 可以将多种静态资源 js、css、less 转换成一个静态文件，减少了页面的请求。 </p><h3 id="二、Webpack安装"><a href="#二、Webpack安装" class="headerlink" title="二、Webpack安装"></a>二、Webpack安装</h3><p>1、全局安装</p><pre class=" language-javascript"><code class="language-javascript">npm install <span class="token operator">-</span>g webpack webpack<span class="token operator">-</span>cli</code></pre><p>2、安装后查看版本号</p><pre class=" language-javascript"><code class="language-javascript">webpack <span class="token operator">-</span>v</code></pre><h3 id="三、初始化项目"><a href="#三、初始化项目" class="headerlink" title="三、初始化项目"></a>三、初始化项目</h3><p>1、创建webpack文件夹<br>进入webpack目录，执行命令</p><pre class=" language-javascript"><code class="language-javascript">npm init <span class="token operator">-</span>y</code></pre><p>2、创建src文件夹<br>3、src下创建common.js</p><pre class=" language-javascript"><code class="language-javascript">exports<span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4、src下创建utils.js</p><pre class=" language-javascript"><code class="language-javascript">exports<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>5、src下创建main.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> common <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./common'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>common<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Hello world!'</span> <span class="token operator">+</span> utils<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>四、JS打包<br>1、webpack目录下创建配置文件webpack.config.js<br>以下配置的意思是：读取当前项目目录下src文件夹中的main.js（入口文件）内容，分析资源依赖，把相关的js文件打包，打包后的文件放入当前目录的dist文件夹下，打包后的js文件名为bundle.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Node.js内置模块</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//配置入口文件</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//输出路径，__dirname：当前文件所在路径</span>        filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span> <span class="token comment" spellcheck="true">//输出文件</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2、命令行执行编译命令</p><pre class=" language-javascript"><code class="language-javascript">webpack #有黄色警告webpack <span class="token operator">--</span>mode<span class="token operator">=</span>development #没有警告#执行后查看bundle<span class="token punctuation">.</span>js 里面包含了上面两个js文件的内容并惊醒了代码压缩</code></pre><p>3、webpack目录下创建index.html<br>引用bundle.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"dist/bundle.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></code></pre><h3 id="五、CSS打包"><a href="#五、CSS打包" class="headerlink" title="五、CSS打包"></a>五、CSS打包</h3><p>1、安装style-loader和 css-loader<br>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。</p><p>Loader 可以理解为是模块和资源的转换器。</p><p>首先我们需要安装相关Loader插件，css-loader 是将 css 装载到 javascript；style-loader 是让 javascript 认识css</p><pre class=" language-javascript"><code class="language-javascript">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev style<span class="token operator">-</span>loader css<span class="token operator">-</span>loader </code></pre><p>2、修改webpack.config.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Node.js内置模块</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//配置入口文件</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//输出路径，__dirname：当前文件所在路径</span>        filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span> <span class="token comment" spellcheck="true">//输出文件</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//打包规则应用到以css结尾的文件上</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、在src文件夹创建style.css</p><pre class=" language-javascript"><code class="language-javascript">body<span class="token punctuation">{</span>    background<span class="token punctuation">:</span>pink<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4、修改main.js<br>在第一行引入style.css</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./style.css'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>5、浏览器中查看index.html</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端知识快速整理&quot;&gt;&lt;a href=&quot;#前端知识快速整理&quot; class=&quot;headerlink&quot; title=&quot;前端知识快速整理&quot;&gt;&lt;/a&gt;前端知识快速整理&lt;/h1&gt;&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
    
      <category term="vue" scheme="http://yan_han_guang.gitee.io/tags/vue/"/>
    
      <category term="node" scheme="http://yan_han_guang.gitee.io/tags/node/"/>
    
      <category term="es6" scheme="http://yan_han_guang.gitee.io/tags/es6/"/>
    
      <category term="webpack" scheme="http://yan_han_guang.gitee.io/tags/webpack/"/>
    
      <category term="前端" scheme="http://yan_han_guang.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="npm" scheme="http://yan_han_guang.gitee.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>璃龙篦</title>
    <link href="http://yan_han_guang.gitee.io/2020/04/10/%E7%92%83%E9%BE%99%E7%AF%A6/"/>
    <id>http://yan_han_guang.gitee.io/2020/04/10/%E7%92%83%E9%BE%99%E7%AF%A6/</id>
    <published>2020-04-10T07:32:32.000Z</published>
    <updated>2020-04-12T10:50:10.096Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>    这是在我高考结束后的那个漫长假期里写的第三本小说，当时想尝试写个风格另类的文章，后来因为学业的原因写了二十几章就断了，不知道若干年后会不会有重启的计划。    期间写了其他很多的小说，各种类型的都尝试了一下，有些受到了重视签约了，但是没有放进我的博客，之所以放这本没有任何成就的小说，因为它基本上算是我后来写网络小说动力的“处女作”吧。    以下只是一小节内容。</code></pre><h1 id="重生-一"><a href="#重生-一" class="headerlink" title="重生 一"></a>重生 一</h1><p>天下英杰、仙盟百家祭起九天摄魂阵，将赤水妖姬魂赦九天，层封元始。只待这妖身有一刻不可动弹，便召个四象万剑斩它个肉糊骨挫。玄剑交错中，火砾迸溅，焚骨扬灰，时值一日，仙盟百家殚精竭虑只为确保这妖姬再无一丝血肉可存于世，方才停下，疲惫难堪。</p><p>“这般挫骨扬灰之象，当真是残忍，千百年难得一见，这就是身为世间妖祖的后果。”</p><p>“可别大意，这可不是前边那区区上古凶兽所能比拟的，这可是世间妖祖，拂袖间不知能召唤出多少上古凶兽，一凶便让我等如此狼狈，若是一丝气血残存，便可再世，这莫大的戾气必会搅得这世间生灵涂炭。”</p><p>时值此刻，仍有诸多弟子不明白，既然这妖祖如此厉害，怎么终落得这番惨状。</p><p>“我可听说这妖姬始祖确翻江倒海、通天彻地之能，此前即便是四大仙门门主都难以近得她身，伤不及分毫，又怎却……”</p><p>“这你们这些后方施援的人就有所不知了，这最大功劳得多亏了那四大仙门中的浣溪江氏。非是这江家门主有多厉害，而是这江氏一门中竟有熟知这妖姬弱点的弟子，竟还是个外姓弟子！”</p><p>见这众门生不知，四大仙门的子弟便继续道。</p><p>“这浣溪江氏的弟子青缃确实了得，不知这封魔箭矢何来的强大法力，竟可一箭破开那妖姬的结界，冰封了这妖祖的肢体，几箭破魔矢更是轻易击碎了这妖祖的“璃龙篦”，乱了这妖姬的思绪，这才让众仙家摆脱了妖兽的纠缠，争取到了祭起九天摄魂阵的机会。”</p><p>“我看啊，哪是这浣溪江氏外门弟子多么了得，而是她与这妖姬可是四大仙门皆知的“磨镜”吧！被自己至亲之人背叛可真是多么个落魄下场。”说道，那淮杨秦氏门生笑道。</p><p>“好！这大义灭亲，真是大快人心啊！”枫丹白氏的子弟也附和他。</p><p>“确实，这妖祖本是浣溪江氏弟子，江纤尘……”</p><p>“别提她！我们江氏没有这个人！”终于是有浣溪江氏的女弟子应声了，可又有所顾虑，但回头见那青缃师姐为了对抗妖姬已然晕倒，便又放声说道：“真不知青缃师姐是怎么了，竟然总是偏袒上这女妖江纤尘，亲近得过分，我看一定是中了这妖姬的什么邪术！”</p><p>浣溪江氏近几年屡屡在仙盟中扮演也关键角色，跻身四大仙门之末。</p><p>幽都梦氏大师兄梦浮生听着这话有些难受，便道：<br>“这话倒有些言重了，浣溪江氏何能何耐，我所知这浣溪江氏能有今日四大仙门的成就，多亏了这江纤尘。还是说今后没了江纤尘，就凭你们还能保着这四大仙门之位！希望姑娘自重！”<br>说罢，也不愿留下久辩，乘着“尊月剑”而去，一身月色罗裳，发依以白冠束起，身躯凛凛，俨然高冷不可冒犯面相，这在仙家公子中是几近颜首的姿容。</p><p>既然见是幽都梦氏的若梦君开口，众人便不敢多言，待其远去，便有枫丹白氏的子弟道：<br>“就是，若不是那妖姬助你们，你们这羸弱的浣溪江氏又怎么可能上得了仙门四家之列！”</p><p>枫丹白氏在四仙门中排第三，若不江纤尘与浣溪江氏断了关系，这浣溪江氏妥妥是仅次于幽都梦氏的大势力。枫丹白氏家门也以浣溪江氏不齿。</p><p>“即使如此，当年若不是青缃师姐把这妖姬从赤水把她带回江家收养，她又怎么会有如今的成就，她倒好，不尊戒律，枉顾私情，忘恩负义，在外给浣溪江氏添了多少坏名声，闹得天下鸡犬不宁，传言还对我们师姐有非分之想的……”</p><p>“真想不到，这妖祖竟是磨镜，喜好这口！要是我是你们师姐，怎么可能对她这般优柔寡断，当初若在赤水识得这是妖姬始祖，就必然毁她个元神俱灭，怎留得今日祸害。”</p><p>“你莫不是忘了，赤水沿上百家上万甲胄，一夜之间，万妖肆虐，众士血泊赤水之事了，几年前便有这等本事，就凭你怎么可能敌得了。”</p><p>“但如今她已被魂赦九天，焚骨扬灰，永世不得轮回超生，又有何惧。”</p><p>“妖虽已灭，但这“璃龙篦”……”</p><p>这“璃龙篦”一出，倒令人回想了事先与凶兽们交战的恐惧。这“璃龙篦”乃汇天下妖兽之血，以各方妖兽之骸炼制的妖物。任凡人以血代偿，都可能召唤出凶兽为祸一方。而这妖姬始祖更是了得，可同时造出上百凶悍妖兽。<br>众人皆默不敢应声，怕这“璃龙篦”依在，扰这众仙门终不得安宁。</p><p>“方才不是讲过，被那青缃姑娘的破魔矢给击碎了吗，想必如今也随那妖姬葬去，回想这青缃也算是做对了一事，亲手冰封了那妖祖，毁了“璃龙篦”，不然这一役后也是不得不隐退这江氏大门。”</p><p>虽也是有人提出了江纤尘所行善事，但众后生子弟多不曾亲历或与江纤尘、青缃共事过，自然持怒意较多，争论一晌不过是为了守着阵中有无异样之时，拿来消遣的谈资罢了。谁也也从未见料想当世妖尊竟混入仙门，还有“磨镜”之癖。</p><p>妖姬已灭是板上钉钉的事，但如今萦绕在众仙门心头的大事，是那“璃龙篦”是否真如传言中被毁，尚且无定论。</p><p>每日皆有仙盟子弟守着赤水，查探异样，查询“璃龙篦”的下落。<br>日子一天天过去，头七日……垒七……五七……七七……过了这个时日，强如妖祖的逃逸残魂在阳间也会魂飞魄散。见这赤水草木稀生，池河干涸已无残魂异象，仙盟才撤下九天摄魂阵，众子弟打道回府，庆贺赤水此役。</p><p>九天摄魂阵乃仙盟第一禁术，此阵一出，怎管他大罗金仙、魔尊妖帝，绝无出逃生还的可能。但此术需要仙盟各家中功力深厚者去镇守六十四个方位，拼个功力散退方止，故经此一战，仙盟百家实力大挫，陆陆续续进入门辈迭代交替的时候……  </p><h1 id="重生-二"><a href="#重生-二" class="headerlink" title="重生 二"></a>重生 二</h1><p>浣溪城，河水清澈，能漂洗炼煮后的蚕丝，因此得名浣溪。仙门百家中烟云缭绕之地，晖晨金光，月下紫气，潭涧坞亭密布。</p><p>这其中烟云涧乃青缃姑娘最常驻之地。</p><p>七月初七，烟云鹊桥，青缃倚栏“不思浣”，怀揣着当日赤水一役，妹妹江纤尘给她留下的“璃龙篦”碎片，不过比那相思谷大不甚多。</p><p>“一梳梳到底，二梳白发齐眉，三梳……”</p><p>望这手心碎篦，青缃也不禁叹，“怎来得三疏儿孙满堂，仙门中人本不该有这情思。纤尘妹妹走后，日子也都清寂，说好的照顾她一人，伊人远在天边，安否？”</p><p>青缃早已了失魂了藏了泪，话一道似平常叙旧，但见那“碎篦”竟流露出妖气。</p><p>“纤尘？”</p><p>“非是这妖母纤尘降世，而是它感召到了同一块“璃龙篦”碎片的到来。”话音刚落，只见师姐江婉流降在亭檐，其娇若游龙，翩翩婉转绕芳甸，额上一点黄玉，丹唇皓齿，是“世家七贤”的天玑。</p><p>“可怜我的傻师妹，天下因“璃龙篦”大乱，你却还想着那江纤尘，当初你刚带她上山时可是从来不招待她呢，怎么才过个一两年你倒是彻底变了个样……”</p><p>“姐姐不应该是来训我的吧，今日是出了何事，要带上我出城？”</p><p>“还记得几年前的马嵬坡吗？那种恶心的东西好像又复活了！”可知江婉流此话中并非是忌惮那物。</p><p>“重生？”青缃将亭上的檀香弓取下……</p><hr><p>彼时的马嵬坡上，云雨难测。东方纤尘不禁打了几个寒颤。</p><p>挣几个钱倒不是什么重要的目的，众人皆崇尚修真家世，我倒是不齿那名声，谁说干好事的都是那帮人……东方纤尘叼着根茅草自娱道。</p><p>镇长恭恭敬敬地给东方纤尘细讲这马嵬坡近况：</p><p>“这里阴湿异乎寻常，半年前，正是那赤水妖姬魂飞魄散后，马嵬坡便似上了迷魂，陇桂镇上的人但凡进那坡中寻宝，当日不归，次日身首便挂在了沿途槐树，成了吊尸体。想来怕不是那妖姬归来作孽了吧？”</p><p>这镇上人邀他前来祛除这邪祟，毫不知这东方纤尘与那江纤尘的渊源瓜葛。只听说这东方纤尘算个半妖，是个有些本事的妖道。</p><p>东方纤尘当即是开了句玩笑：“归来作什么孽，这可不是归来了吗？”<br>“江纤尘虽号为妖祖，但也没做多少伤天害理之事，也罢，谁叫纤尘是妖却管那人间事，人和妖要能共处那还要仙盟何用，到底是犯几家的利益，动了仙盟的奶酪。”</p><p>东方纤尘潜意识是如此，但这也是他克制不住的想法，如今十全是男子东方纤尘，哪还是什么“破妖姬”江纤尘。</p><p>想来镇上从来只是马嵬坡闹了人命，而这镇却没有丝毫异动，镇里人也相安无事，看来是早有高人在马嵬坡下了界，无人知晓罢了。</p><p>“弗染君今日准备下去探一遭吗?”陇桂镇镇主问道，“我已向浣溪江氏发了函柬，大概今晚就到。”</p><p>一听这镇主还请了浣溪江氏的人，东方纤尘本是想等待多个帮手再行动的想法也被扑灭了，要是那两个家伙认出了他这妖法那可就百口莫辩了。</p><p>“不了，趁天色尚早，我一人行动即可！”弗染君便是东方纤尘的字。</p><p>东方纤尘现不过是个遍历天下的散人，没得个衬手利器。但见其手掠过之处，枯叶逢生，皆化作个玲珑小样，双手合实，念叨：“走进去瞧瞧。”</p><p>此术名曰——千障眼。</p><p>果真如他所愿，真人不必趟险，便有群妖为自己探境，“小叶妖门”所见，即是自己的视野区。</p><p>马嵬坡与陇桂阵接壤前的吊尸还着人的血色，看来是近日身亡不久。但往那深处寻去，具具皆是腐烂不堪，风湿肉臭，垂吊枝头。</p><p>那尸首瞳珠炯炯有神，不似被摄取魂魄那般萎靡，肉身虽腐烂，但可见残存腐肉不是被摄干了精气那般惨白，肉身自然风干，更加不可能是被吊起来蚕食了。</p><p>不摄精魂，不贪精气更不喜人肉。既非鬼，又不似妖，玩弄着村民，这到底是何物所为。</p><p>每句尸首皆借由黑藤悬于槐树枝干，小叶妖们攀沿而上，欲分别检查着每一具尸身。</p><p>忽见黑丝劈来，所有近尸眼线顷刻荡然无存。好似天罗地网般铺天盖下，数不尽的飞丝击穿了大量的眼线。</p><p>看来是被发现了，还好侥幸有几处眼线没近那尸身，东方纤尘召起其中一叶施展法相天地，化作十米巨森，宛若庞大树人。</p><p>“大家伙来了，就不信妖怪还不现身！”话虽如此，东方纤尘也快撑不住了，“可恶，给叶子化精，强行驱使施展法相天地对自己妖力的损耗不是一般的大。”</p><p>可下一幕却怔住了东方纤尘。树上所有吊尸竟然解了下来，疯狂涌向了巨森进行啃食。<br>体型变大了，灵活度便远不如体格娇小的形态。</p><p>那丧尸又名“飞尸”，速度极快，沿巨身躯干覆盖，以不可思议的速度破坏着。奈何东方妖力不足，卸下了术。</p><p>巨森顷刻间瓦解，自中心刮起巨风零落纤尘。</p><p>“弗染君，境内如何。”镇长问道。</p><p>“看到了很多更凶残的飞尸还有黑线，虽然没有看见妖怪的影子，但是可以肯定的是，任何尸身都是它的利器。”东方纤尘道，</p><p>在没有摸清它的底细前，贸然进去或许自己也不是那妖怪的对手。思索着，只见那镇长发现了一张符文，贴于接壤地界的大树处。</p><p>方才东方纤尘施法带走了大量化妖的叶片，又在大妖巨森肢散时林中灌起大风，那树上的符文自然便显露了出来。</p><p>看来之所以陇桂镇安宁，多是因这先人下的符文咒记。</p><p>伫立远眺，那符文怎生得如此熟悉，东方纤尘不禁回忆起，<br>“这纹路是妖母江纤尘下的结界！”</p><h1 id="玄梨-一"><a href="#玄梨-一" class="headerlink" title="玄梨 一"></a>玄梨 一</h1><p>虽不知自己何时在此处下的界，但这也说明，本人作古多年，还是干了不少好事的。</p><p>“镇主，这界的确是出自妖姬江纤尘之手，故那妖姬作祟的谣言自然不攻自破，不然以她的修为，怎么可能连自己的结界阵法也破不了。”东方纤尘对镇主解释道。</p><p>里边那邪祟控尸的手法与江纤尘倒有几分相似，但绝对不是江纤尘的残魂，东方纤尘不过只有那江纤尘的部分记忆，但是源自妖母的他也能感觉得到江纤尘的残魂。</p><p>这也不好说，毕竟这里边有个浓厚的味道，可以掩盖妖气。</p><p>“味道?”镇主尚且与东方纤尘同辈，对于东方纤尘这等修真士人自当是毕恭毕敬，“弗染君说的可是这物，方才风口灌来之物，见那香囊中是葡萄花鸟纹银，便知这是镇上前辈们所寻宝物。”</p><p>那香囊呈圆球形，通体镂空，质由银制外壁，无论球囊如何转动，香料都不会撒出。看来是个富有人家闺女之物。</p><p>“为了这么一个破东西，竟然有那么多人甘愿冒死进山，真是可笑……这凡间之物有什么值得贪恋的？”东方纤尘搭手不屑道。</p><p>“世所诸恶皆因贪婪而起，“贪”可谓是万恶之源。弗染君您身世半妖，颇有本事，故不暗财物。但俗世凡人，特别是贫苦之家可没那起点，衣不裹，食不饱，笃信“生死攸口黄金渡”的道理。弗染君难道也没有想追求的吗？比如说长生？”镇主道。</p><p>“你这毛头孩子管不着，总之就这么一个破球，真有那么值钱？”东方纤尘道。</p><p>“当然，单单这一个香囊倒没什么，但是这个香囊里边可藏着一段悠长的历史，还与那几年前刚被平定的妖祟有关。”镇主娓娓道来：</p><hr><p>“战国时代，一山一城，玄明城主带着杨梨花一行人仓皇北顾。</p><p>众人行至马嵬坡，单于将军与左宗慈密会。</p><p>“左使！这杨氏着实欺人太甚了！此番我等败走明顶城，真是拜那杨戚老头所赐——在城主面前诋毁我，害我下迁副将，还公然赐死我的得力手下。能人不受重用，城中再无良将，这倒好，终落个弃城而逃的下场，白费了昔日我攻城拔寨，为玄明城主做的功劳。”单于将军极度悲愤！</p><p>“玄明城主这是被那杨家妖媚惑得不深，众军士也都饱受他杨氏专政的苦，都是有苦难言，不然又是落得一个凌迟的下场。”左宗慈也是十分无奈，贵为昔日玄明城主得力参臣，左右臂膀，竟然比不上一个妖女。</p><p>“如今杨戚是城主大人的岳父，极得玄明城主的信任，杨戚专政下场如此，左使难道不早点出些对策？再任他嚣张跋扈下去，我们一行人便永无出头之日了。收服城池也必将遥遥无期了。”单于将军只是个莽夫，没些主见。</p><p>“将军莫急，我知道单将军急着手刃杨氏全族的性命，但又怕丢了自己性命还连累了自己部下。归根结底只因是杨氏一族在城主身边渗透太大，但是将军别忘了，如今全军对杨氏早已是敢怒不敢言，痛恨之心人尽有之，只要将军此刻发动兵变，众军士必将支持将军所做所谓，只要将军按照我说的做……”</p><p>当天夜里，单于率二十死侍直入杨戚老巢，虽说仅杨戚一个帐篷便有五百守卫护着，但见那单将军来势汹汹，所欲行之事，便是为斩下杨戚的头，竟无一人敢拦下单将军。单于如入无人之境，任那杨戚如何叫人护驾，非但无人肯护，连马匹都已提前被人牵走。可怜杨戚为官显赫一时，终是成了单于的刀下鬼。</p><p>玄明与杨梨花二人共处一帐，众人都不敢贸然闯入……”</p><hr><p>“玄明？这家伙既然养了这个人人喊而杀之的败类，昏了头的家伙，难道这些将士们不恨他吗，闯进去了不就一了百了？”听镇主讲到这，东方纤尘有些不解。</p><p>见东方纤尘不知马嵬坡轶事，镇主辩道：“玄明即使那时昏庸，但年少的玄明可是颇具威望，凭一己之力攻城拔寨，定都明顶。论武众将皆叹不如。即使那时昏庸，但玄明的功绩又有谁能与之平起？”</p><p>镇主再道：</p><hr><p>“然鸡叫天明，待那玄明起身出帐，却见全军众将士皆跪地乞求，而单于更是将杨戚的首级吊在帐前！</p><p>“城主！恕臣等冒昧，今日提着杨贼头颅前来乞求诛杀杨氏全族，臣甘以死谢罪，只愿城主能够早日恢复往年意气，不再被杨氏狐女所惑。”</p><p>玄明见此情此景怒气张拔：“放肆！未经本王的允许就敢杀了本王的亲人，再这么造次下去，难不成今晚就敢黄袍加身，提刀刺向本王！”“重责40大板！”</p><p>话虽如此，玄明又怎敢赐死单于，单于英勇可畏，忠诚可嘉，眼下又正值城破家亡，复兴昔景时刻，怎么能够赐死自己爱将，但40板下去，也是皮开肉绽，当即不能够上战了。</p><p>众军士皆同时跪地乞求赦免单将军的罪，只道这数月城池连失，出师不利，玄明难辞其咎，全军上下难免心存怨意。将士们也不堪杨氏家族讹言，要求赐死杨氏。</p><hr><p>“说这杨戚独断专政害人不浅，但与杨梨花又有何干？”东方纤尘问道。</p><p>镇主吟诵野史所述之文：“杨家有女初长成，风华绝貌乱世逢，一心本愿玄明度，无奈生断权势争。”</p><p>玄明、梨花相见后，玄明也放下了昔日争霸天下的心，失了雄心，不过已是个无用之主。十六城如今尽数已失，明顶城被破。这不完全是杨戚的错，难道玄明就没有错吗？</p><p>”</p><hr><p>左宗慈作为玄明的左使，如今也是军士代表，进帐与唐玄明商议。</p><p>“宗慈，除了赐死爱妃，难道就没有别的方法了吗！杨梨花不过就是杨戚实现自己权利欲望的工具，她又做错了什么？为什么就一定要她承担本不是她的错误！”玄明质问左宗慈。”</p><p>左宗慈俯身叩首，礼尽恭毕，再道：“城主，恕臣直言，您难道就看不出吗？城破家亡，众士对你此番的统帅已经满载怨言，单于的心意你又何尝不知。杀了杨戚只能平复众人对杨戚嚣张跋扈的仇心，但他们同时也对你的昏庸无度心怀不满。”</p><p>“单于不过是将舆论的矛头从你身上转嫁到您的爱妃身上！”</p><p>玄明此刻怒气未没，夺话而出：“可她何罪之有！”</p><p>左宗慈再扣三首，以视罪不可赦，来世报恩之意，便说：“城主您荒唐啊！她有罪，是重罪！罪在爱上的是一个权力加身，日后能成就大事的主宰身上。”</p><p>“您也有错，错就错在，在最不该爱的时候，爱上了一个不该爱的人。以为自己能为所爱倾尽天下，但身为势力上的走狗，终究是身不由己。给不起的后生，就不该去伤害，让对方为你承担责任，让你所爱的人去承受你带来的后果。”</p><p>“如今大势所趋，如果杨梨花不死，众军士不服，势必绑架单于逼他自立，而城主您也不能幸免于难。”</p><p>“杨妃若死，一可巩固您的地位，二来振奋士气，有望早日光复山河。主上您为贵人，女人可再寻，但命只有这一条。不如让她独自去承担城破家亡的责任。”<br>……</p><p>玄明望向梨花，心中难掩伤情。</p><p>玄明不肯下意，请求给他七日时间思索。</p><p>左宗慈知道唐玄明不肯下决心，私下里便密会杨梨花。</p><p>“杨后您今早也知我们所言，不知您有何感想。”宗慈道。</p><p>杨梨花泣泪徐许：“玄明让我逃离这是非之地，日后待他光复山河再亲自来寻我。可是我不想离开他……”</p><p>宗慈再道：“杨后是觉得，如今天下大势，城主已无心战事，若是苟利生死而走，城主也很可能战死，而相见也遥遥无期吗？”</p><p>杨梨花落泪不语，但确有此理。</p><p>“杨后您也当知，即使您逃了，这方圆数里早已被军士们围住，就是为了防止玄明给你偷渡，他们是下狠心要杀了你，你终究也是逃不出。若是一逃，这一别怕是黄泉路上相见了。”</p><p>“您应该知道怎么做了吧？”</p><h1 id="玄梨-二"><a href="#玄梨-二" class="headerlink" title="玄梨 二"></a>玄梨 二</h1><p>梨花不甘：“可是我不想离开玄明！”</p><p>“臣早年相识一人，名曰东方熠。此人擅世家奇术，我曾拜他习得一种封魂锁命之法，杨后您若是肯成就玄明，微臣冒死也会为你留下魂魄，让你依旧能和城主在一起！”</p><p>……</p><p>宗慈单劝至夜半子时，终于是道破了这一双一对的宿命。</p><p>“妾罪合万死，衣服之外，皆圣恩所赐。唯发肤是父母所生。今当即死，无以谢上。”说完铰下一缕头发让左宗慈转交给玄明。</p><p>当晚，左宗慈带着杨梨花的青丝递给玄明，玄明自然知道后来之况，赶了过去，只见爱妃已然断气，此情此景，唯有痛哭流涕还能作何感慨。</p><p>“城主玄明牺牲了杨梨花的生命，让她独自去承担城破家亡的责任。杨梨花自绞后，尸体被匆忙就地埋葬。”</p><hr><p>“东方熠？封魂锁命？这都是些什么妖术，这种鬼话也听信，难道不知是被迫的……”东方纤尘听此略感不解。</p><p>镇主再道：“</p><p>后来已过不知春秋多少载，玄明城主才派人前来移葬杨梨花的遗体。可入了马嵬坡的人却不再出来，但当年陇桂镇上的父老乡亲们也都见到了这行人上山的踪迹。</p><p>玄明城主在当时可谓奢华极致，传闻也富可敌国，正所谓尸霾群坟藏重金。马嵬坡自那玄明城主的部下上去后，山中便风雨不定，坡上常被雨水冲刷，有葬品落下被镇中人所拾，便是一夜暴富，自从之后常有镇上人前去寻坟，十去不还一，能回来的多少也是神志不清的家伙了。</p><p>但凭谁也有那一夜暴富的糟糕念想，不光陇桂镇，只要闻这马嵬坡坟葬还存，便能见每日络绎不绝的墓贼前去。仙盟中人也听闻那处邪祟，可也难以应付，折损了不少仙家道骨，但后来终有高人出手平定了。</p><p>听闻曾命悬归来的壮士回道，那杨梨花的遗体只剩下莹莹白骨，唯有临死时佩戴在胸前的香囊还完好似昔。只待那坡上安稳后再寻却不见得坟口。</p><p>但自那赤水妖姬被仙盟挫骨扬灰后，那马嵬坡却又不太安宁，常有金银流下，明知是那邪祟重生，但是镇上前辈依旧是贸然前去，落得镇中今由我这无能男儿主持……”说罢，镇主连连叹声。</p><p>东方纤尘听罢，这邪祟确实与这杨梨花脱不开干系，这般被迫而绞死，死后若是阴魂不散，便成了游离阳世的厉鬼，为了实现自己的愿望，又或是唯等着自己的仇人下来，才转生。或直接进行报复，或得法师超度，只要怨气一消，愿望达到就能转生。</p><p>但令东方纤尘尤为不解的是，明明妖姬江纤尘已经压制了那邪祟，却放了它一活路，在陇桂镇设上一道针对这邪祟的结界，这里边到底藏的是什么东西?和这江纤尘到底有什么关系?</p><p>值此时刻，天已迟暮。</p><p>“镇主，外边仙盟众人已经陆续进山。”</p><p>东方纤尘虽说是个散人，难得与这仙门子弟们能够同进这马嵬坡共事还是头一遭。</p><p>“奇了怪，这青缃他们怎么都还没来，虽然这些后生子弟来的声势浩大，但那山中邪祟根本不是这些小家伙所能应付得了，我那三千零叶也在顷刻间覆灭……”东方纤尘略感不对，总觉青缃等人肯定故落后声。</p><p>“那……弗染君，我们现在又该干嘛?”镇主在界外问道。</p><p>“干嘛?就我那点微弱道行，进了去也是送死，你倒不如给我讲那个杨梨花的事……”东方纤尘倒是显得不够重视那些仙门子弟的性命。</p><p>“后来……可能没了，噢！此前在镇边近这马嵬坡附近有间屋子，延边提有“谁为玄明重解得，一生遗恨系心肠”一联……”</p><p>这与此前相传玄明城主对杨梨花的事迹情感倒是不同。但是镇主还是娓娓道来：</p><hr><p>垂垂老矣的玄明君暮年踏足了马嵬坡下，修缮一屋，彻夜只待杨梨花，那夜春雨弥漫，槐下见（xian）一香囊，玄明见到香囊睹物思人，当年歌舞的欢乐尤在，伊人的浓爱只留下眼前这只香囊！他把香囊装入衣袖，不禁老泪纵横。雨夜那晚，玄明出走便再无回……</p><hr><p>“屋子?！那屋子现在何处！”事实上东方纤尘边听镇主讲着，边利用正午在林中潜伏的叶子精查探着所有仙盟子弟的安危动向。</p><p>如此之久也不见那邪祟现身，夜间阴气极重，如果那邪祟展现了今日正午的实力，那仙盟百家子弟怕是又重蹈当日覆辙。年暮的玄明城主，离开那屋后不归，得去那屋看看！</p><p>“那屋子莫非有什么?”镇主不解道。</p><p>一生遗恨系心肠，玄明城主分明有苦难言，或许两个传言都是真。倘若假设成立，刚刚在林中却寻不得玄明身迹。</p><p>如果传言是真的，如果玄明一直未归，如果江纤尘刻意留下了那邪祟的性命。没人给我个合理解释，那我只好去那屋里，自己找答案！”东方纤尘似乎领会到了一些难言之悟。</p><p>镇主携东方纤尘赶到。</p><p>但眼前一切却是惊呆了两人，那屋又岂是所期那般，早已是凭空消失了。</p><p>“不可能！几年前都还可见！这一点没错！即便是暴雨冲刷也得有痕迹！凭空消失?！”镇主道。</p><p>明明有了最说得通，最直接的线索，但为何却遇上这等异象，难道玄明不曾来过?</p><p>“香囊呢，解得开吗？”东方纤尘突然问道。</p><p>“香囊在我府上，弗染君怎么?”</p><p>见东方纤尘手中燃起绿色阴火，挥袖剥开迷雾，那间残陋破屋于是忽浮现眼前。此火名曰：妖阴离火。</p><p>“我们刚刚所见皆是幻象，”东方纤尘本也是中了毒香产生了幻觉。可此刻安插在马嵬坡里的那些“小叶精”的视野告诉他，山中子弟都产生了幻觉，开始自相残杀，所以只怕镇主与自己也中了招。阴火灼万物，其灰可释神。</p><p>神智既得清醒，屋内景致便一目了然，无联无对，但确是有人寄居过，俯身擦拭，除了尘灰，就是蓬乱垢发。</p><p>“不好，那个香囊有问题，快回去看看！”东方纤尘道。</p><p>先与这这镇主分向，镇主回镇上取回香囊，东方纤尘则先亲自去驱散山上毒气，解救仙门弟子，再去与镇主汇合。</p><h1 id="玄梨三"><a href="#玄梨三" class="headerlink" title="玄梨三"></a>玄梨三</h1><p>“没有人再能为玄明解开这只小小的香囊了，说不清楚是爱还是恨的情感，除了梨花谁人能解得开呢？”</p><p>“妖阴离火”虽能解开幻术，但偌大山头恐怕因此遭殃。“这些子弟也真是不省心啊，到底是见了什么，竟在此处中术……”</p><p>“无妨，只能这样了！”取纸扇“仙袂”，拭上自身妖血，置于空中，风涌汇聚，唤出风之使者——“妖姬仙袂”。</p><p>红缎绫罗妩媚矣，金铃起，风吹仙袂飘飘举。——仙袂之貌</p><p>“多年不见，纤尘你倒彻底变了个样。”仙袂执扇魅笑，任谁其实也能听出几分重逢之悦与几分物是人非的无奈。</p><p>“你知道我想干嘛，帮我把这整座山的迷烟给驱散了。”东方纤尘命令道。</p><p>“ho<del>见面都不肯说声思念，你真是有了青缃那丫头忘了我啊</del>”仙袂打笑道。</p><p>“没时间跟你废话了。”东方纤尘开始显得有些心虚。</p><p>“看出了，你弱了不少喔！”仙袂再一次媚笑，竟泄出一丝难以抹去的杀气，使那东方纤尘不禁背凉了一遭。</p><hr><p>这马嵬坡上山风迷雾是导致上山寻坟者死亡的最主要原因，但凡见到吊满一树的的干尸，谁人不感心寒，只需施以能令人产生幻觉的迷雾，凡人便能在恐惧中结束了生命。</p><p>仙盟子弟们即使不感到恐惧，能够在幻术中脱身，也会遇到里面那个棘手的邪祟使绊，百年前，仙盟靠着死伤惨重的代价才拿下马嵬坡，却还是让那邪祟逃了。</p><p>驱散迷雾绝非易事，但对于妖姬仙袂来说却如同砍瓜切菜一般，纸扇仙袂一挥破万法——“风乐”，仙袂执扇之臂并没有衣袖遮拦，纤纤细肘却使得这般狂风，犹有当年独战江、梦两主的神采。</p><p>风之强劲，那迷雾荡然全无，但摧枯拉朽般的威力也伤了不少仙盟弟子。</p><p>当是时，灵矢一记破了仙袂的纸扇。</p><p>仙袂这才注意到前方是浣溪江氏二弟子，青缃手执檀木灵弓守着仙袂，这本是无需忌惮之事，可身后竟连世家七贤的天玑——江婉流也在。</p><p>“如果我和纤尘联手……”只是这仙袂万万没想到，纤尘早已在江婉流来前便快马加鞭地逃去……</p><p>“可恶，这家伙怎么逃得这么快，刚刚重生，力量尚未恢复，不宜大战。”仙袂不禁吐槽起了东方纤尘。</p><p>“今日不想战，我还没清楚我是怎么重生的，来日相逢我们再会！”仙袂风起，衣裳肉身在风蚀中殆尽。</p><p>青、江二人非是想放过妖姬仙袂，只是那马嵬坡的事情更要紧，但谁都不敢相信的是，这仙袂本应是被江婉流和梦浮生二人所杀，竟在今日重生于此。</p><p>难道真是江纤尘重返世间了吗？这距离她被分魂才刚过一个年头！江婉流也见到了那个仓皇逃去的男子，在场且能召出妖姬仙袂的也就只有他了。</p><p>“师妹，那个人不去追吗？”江婉流道。</p><p>“不了，先让他去吧，马嵬坡的迷雾刚散不久，在雾气重聚前先调查清楚山中情况。”青缃也知道那个男人不简单……</p><hr><p>“终究是被那青缃看到了，不知道如今的她会拿我如何，但留下仙袂对上那两人确实也是无计之举……”</p><p>说这东方纤尘是逃，倒不如说是前去陇桂镇上救人，现在的陇桂镇必定正面临一场血雨风腥。</p><p>深山雾散无妖动，那么那至今不明的怪东西必然离去了它老巢，去了某个地方。如果传言中玄明城主拾到了香囊未归是真实发生的。那么能越过纤尘设下界的载体必然是香囊！</p><p>镇主已回镇上，却见那浣溪江氏弟子江天一遍体鳞伤，断了一臂，匍匐在地上，低吟着求救。</p><p>周遭不见一丝打斗的痕迹，街上无人，屋内吭不作声，却是极不寻常。镇主不过十七八岁出头，又胆敢冒险搭救，掉头就跑。</p><p>若是一镇上的民众都遭了殃，一个手无缚鸡之力的人又怎么可能安得全而退？</p><p>多家民户开了窗门，个个却无异样，本就是个常人，镇长自当是向前求救。气色正常，不像是已故更不可能是凶尸，但就这般容貌，眼中却失了神。挥了菜刀就断了镇长一臂。</p><p>不知所措的痛苦呻吟和嘶哑的惨叫声……</p><p>东方纤尘赶来一剑抛去救下镇主与江天一。</p><p>“镇主，江天一！你们二人怎么！”东方纤尘愕然。</p><p>村民们有了异于常人的灵活以及耐力，个个持刀围攻着东方。后边跃起一人，东方侧身飞踢制服，但那村民只是连连后退，贴地之前便止住了身躯，竟然浮起！其余民众皆是如此。</p><p>东方手持不过一柄普通凡铁剑，剑身怎可与家用刀具的硬度相比。既不能伤了这些民众，却也因此杀不出重围，剑在一点点被消蚀，如此一来便是东方也面临着危险。</p><p>“不像是中了幻术而被人操纵，能够同时操纵这么多活人，还真是不好应付。可除了江纤尘，我还真没听过哪个妖怪能够做到这样！”东方纤尘手握那已断之剑大喊：“仙袂！我若是让这些人伤了，你也不能苟活！”</p><p>“风蚀！”仙袂现身之时周遭的气流摧毁了控制着民众的黑线。</p><p>“看来正午所见的黑线就是控制这些民众的凶器！但是突然现出了一个气息，是——江纤尘力量的气息！难道那家伙真的回来了……”东方纤尘不禁一颤，</p><p>江纤尘能够将万物妖化为自己所用，即使不妖化，也能利用璃龙篦召唤处青丝控制任何东西，不同于世间控制意识的方式，江纤尘是靠凌驾世间绝对的妖力去压制一个人或妖的力量，使之丧失抵抗成为傀儡！</p><p>正思索着，却见那江天一突执剑刺来！<br>玄梨 四<br>东方纤尘正在气头上，一把夺过剑斩了江天一身后那看不见的黑线，那线在黑夜中连着人的后脑勺，视野原因根本发现不了。失去了控制的江天一自然是倒下，但在东方纤尘手上的更是惊出了他一身汗。头发！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;    这是在我高考结束后的那个漫长假期里写的第三本小说，当时想尝试写个风格另类的文章，后来因为学业的原因写了二十几章就断了
      
    
    </summary>
    
    
    
      <category term="璃龙篦" scheme="http://yan_han_guang.gitee.io/tags/%E7%92%83%E9%BE%99%E7%AF%A6/"/>
    
      <category term="小说" scheme="http://yan_han_guang.gitee.io/tags/%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>眼</title>
    <link href="http://yan_han_guang.gitee.io/2020/04/10/%E7%9C%BC/"/>
    <id>http://yan_han_guang.gitee.io/2020/04/10/%E7%9C%BC/</id>
    <published>2020-04-10T07:32:32.000Z</published>
    <updated>2020-04-12T10:50:40.941Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>涉及到版权的缘故，书名以及内容都作了修改，均是段落，也就是随便截取一段放上来存档而已。</p><h1 id="第九章-全世界都趁我不在，亏欠了我的姑娘（一）"><a href="#第九章-全世界都趁我不在，亏欠了我的姑娘（一）" class="headerlink" title="第九章 全世界都趁我不在，亏欠了我的姑娘（一）"></a>第九章 全世界都趁我不在，亏欠了我的姑娘（一）</h1><p>家长会那天，本应是和往常无二异，确实那个“单眼婆”身边多了一位又高又帅气的小伙子。</p><p>静姝虽是瘦，但个子在孩子们间本就显得高挑，用顾景云给孩子的衣裳打扮，发饰夹持再和顾景云一起入课室就格外引人注目。好像静姝又漂亮了许多。</p><p>有几个小嘿溜球看了就抖瑟，看得出顾景云不在的日子里依旧是没少给静姝找茬，欺负她。但是静姝从来没跟顾景云提起自己被欺负过，女孩心中一直有着这种想法——只要顾景云不在身边，自己就必然会受到欺负，那就忍着吧，等到顾景云来了，一切都还是春天。</p><p>顾景云不知道，但是又怎么可能发觉不了，静姝的泪痕是深深印在顾景云心里的。这次和顾在一块，班里显然没人敢对静姝说是说非，班上开家长会，孩子都在门外候着，大人在班上听老师讲每个孩子在学校的表现，有个女孩一直趴在窗边看着顾景云。</p><p>“那是你哥哥吗？好帅啊。”小兰（兰芳）问道静姝。</p><p>“嗯嗯！”</p><p>“亲的还是堂？”</p><p>静姝却答不上来，都不是，用那个词都不对，更加不适合，因为顾景云对她来说已经比哥哥还重要。</p><p>兰芳是这班里和静姝最近的人了，不敢说关系很好，但至少能把静姝当作同学看待，能陪她踢踢毽子，看到静姝憧憬的眼神还会借她书看。</p><p>而班上同学对静姝显然不那么善待，静姝的作业几乎全是A+，故此只要有男同学的作业考到了A+便会被起哄为“天造地设”一对，这个词在班上很伤男同学的心，谁都不敢和静姝属于同一层次。女生则是不愿和静姝有同样花色的衣服、裤子，她们曾经的观念里，那是“疯子”、“垃圾婆”的象征。</p><p>尽管现在的静姝有了衣服，不再像从前那般打扮，但成见已经种下，如论什么样的打扮都被认为“披上脸皮的小丑”，丢人现眼，糟蹋衣服。</p><p>婆婆曾经对静姝说过：“衣服是穿给自己的，不是穿给别人看到 。”，顾景云也说过，“你的脸蛋是生给喜欢你的人看的，又何必理会别人的目光。”静姝从来都不在意。</p><p>可很多时候受人欺负都是无厘头的，你不去管他们，你不去在意外界的看法，却总是有人刻意去找你茬，那群孩子不论性别，都会去刻意用言语激怒静姝，如果静姝不为所动，就会采取小动作。有时是用笔在她的衣服是涂涂画画，有时就是用钩子破坏她的衣服，没有丝毫担心会割到女孩子。</p><p>这时的静姝绝对不会憋着，她会哭，毕竟这衣服是景云送的，听到哭声了，那群淘气鬼自然就会收手了，但心底里丝毫没有歉意，更别提怜悯。老师也会来安慰静姝，但这样的时刻每学期都会发生不少次。</p><p>曾经有人问我当高中老师和当小学老师哪一个更累，这个答案其实并没有意义，小时候的孩子并不好教导，往往说完后的话转眼就会忘，即使没有忘，可是因为自控力的不足，常常还会再犯，而高中生则在这方面有不可比拟的优势。工作量上，高中的确很繁累，但是孩子们都成长了，你付出的艰辛，你陪他们的日子，他们也反馈给你自豪感，会铭记你，会给你脱离校园生活后重返青春的幻觉。</p><p>但小学老师也并不是没有这般感觉，只是相比之下确实少了，但是工作压力没那么大，毕竟他们的本职更重要的是“育人”。</p><p>顾景云会调侃静姝：“别总哭，你就是哭太多才把另外颗眼睛哭没的。”虽然是笑话，但意思大家都明白，静姝也在克制自己哭鼻子的次数。</p><p>班主任特意点评了插班生静姝的表现——作业认真，是班上最懂事的孩子，说罢还请了静姝的家主上来分享心得。也就是请顾景云上台，这简直有太多羞愧了，毕竟自己不过还是个学生。</p><p>哪个家长都会听进眼前这个和自己家中长子一般年纪的年轻人，孩子说的话有什么好听的。</p><p>没等顾景云上台，这位华老师就替顾景云介绍了背景“兰大研究生”。</p><p>兰大，重点大学的研究生，这整个县里都没有这种高学历人才，况且他太年轻了，十九岁就已经读上研究生，有几个家长甚至打起了顾景云的主意。</p><p>顾景云没有言说多少辞，只觉得德育为先，智育为后，讲述了他在广州读书时推崇的“素质教育”理念。</p><p>这下更讨得大人喜爱了，竟有些考虑着女儿攀上顾景云这样的女婿，一下课差点成了相亲大会，好在顾景云很快就赶着带静姝离开，才少了许多麻烦。</p><p>其实也并没有那般尴尬，毕竟不是每个人家都想着自己大女儿嫁到远方的，有些人就听信过嫁出去的女儿泼出去的水，怕女儿远去了，没人给自己养老送终。</p><p>这天也算看到了和往常昔日不同的风景，看到静姝身边也不总是孤身一人，还有人能够以正常心态和静姝交流。顾景云没说什么特别的词，只对兰芳小朋友说了“将来走出大山再回来建设家乡”的辞。</p><p>顾景云从华老师口中了解到了一些静姝被欺负的事，他也不追问是哪些孩子是谁，来之前到了镇上去买了上百个棒棒糖，给兰芳五根，给了静姝班上的小朋友每人一根，不论是谁。对一个人好，他可能会忘记；但对一个人坏，他会铭记很久很久，孩子也是这样。顾景云不在，他自然需要帮静姝打通一下身边伙伴的关系，这颗糖对小朋友来说不算什么，但至少能给他们安心。</p><p>“老师夸你呢！”顾景云对静姝说。“以后在学校要继续好好听话。”</p><p>“嗯嗯(^o^)/。”</p><p>不可否认，此后静姝小学生活顺利了很多，几乎没有多少同学会去招惹她，他们知道静姝有个对大家很好很好的哥哥，有个每年假期都会来学校给孩子们带礼物的哥哥，他们也开始憧憬起来山外的世界，都渴望成为像顾景云一样的人。</p><p>但，静姝却很难一直开心、无忧地生活下去。</p><h1 id="第十章全世界都趁我不在，亏欠了我的姑娘（二）"><a href="#第十章全世界都趁我不在，亏欠了我的姑娘（二）" class="headerlink" title="第十章全世界都趁我不在，亏欠了我的姑娘（二）"></a>第十章全世界都趁我不在，亏欠了我的姑娘（二）</h1><p>时间回溯到静姝读六年级的那年，顾景云也读上了博士。</p><p>静姝的家被顾景云还有他带领的支教团队修理得典雅、朴质，颇有一番田园山居的雅致。也得到了许多附近老屋旧主人的帮助，能够居生的空间大了很多，生活更加惬意了。</p><p>最近晚上婆婆睡觉常常哭，人老了也哭，老人给静姝哭得心痛了。</p><p>还是同往常一样早起，早上煲粥，温好水，给婆婆把药放桌上，叮嘱着按时吃药，背着书包就出门。这时鸡群、鸭群们都规规矩矩地各处一窝。</p><p>等到学校四点下课孩子们一起归家，道途降下小雪，和静婆婆一样满首的白发。青丝染尽芳白要花多少年，书中夸张点说是“彻夜”。</p><p>当年静琬琰婆婆年轻时可是个大美女，那一张六十年代和老伴结婚时的照片一直珍藏在静琬琰的柜子里，原来那时的静家是很富有的家族，中间究竟经历了什么大事件，已经随着老人的记忆丢失了。</p><p>天格外的冷咧，临风畏首，听得沿途哀嚎枯叫，大山本应该隔绝了云雾，守护山下的村庄和花田，今日却把它们统统放了进来。</p><p>圈里的鸡、鸭跑到了野外被归来的静姝逮个正着，这小家伙一下就认出了是自家开溜出来的，跑了差不多一公里远的路。应该是只“滑翔鸡”，能蹦老高来越狱，不过沿途又发现了几只。</p><p>婆婆也真是的，可能是今天忘记了把卷子合上了。</p><p>到家了，想把今天所有见到的景物和婆婆分享，却发现婆婆已经安详地在门前的躺椅上离世了。</p><p>满地的鸡鸭打架留下的羽毛，女孩曾以为是恶作剧，婆婆从来不跟她开这个微笑，从来没给她念过“死”这一字，怕她会多想，最终却无征兆地离开了，在静姝看不到的地方。</p><p>手里攥着那湿透了的老伴的旧照片，还有静以筠娶阿珠时一家人的全家福……</p><p>女孩无论如何也唤不醒婆婆，再怎么道歉也求不来婆婆低头，她跪下婆婆也不再会去搭理。以后再没人会把碎肉分给他；再没人挑拣隔夜的饭菜独自吃尽，只为留新鲜的给孩子；更没人会陪她编织、剥壳、晚上给她煲汤煎药，说一句“丫头别太用功了”。</p><p>想背起婆婆，怕撩伤了她的胳膊；想扶着婆婆，婆婆却不愿迈开一步；香坛后的慈航画像也避开了女孩的目光，宣告着无可挽回。一切，都没等静姝准备好天就昏暗了。</p><p>生离死别真的不好赘述，谁能够坦然呢，就算是听说邻居有人去世了都不免开始感慨韶华易逝，总有种今晚梦醒了身边人就会少一个的错觉，但它确确实实可能会发生。</p><p>顾景云请假连夜赶回来，见到了静姝还有婆婆，明明半个多月前才刚陪完老人过完年，转眼间老人就不辞而别了。</p><p>很多事，偏偏要趁你不在意的时候才给你当头一棒。或许以后告别的时候一定要用力一点，因为你不知道多看的这一眼，可能就是最后一眼，多说的这一句话，可能就是最后一句话。</p><p>那璧上的慈航画像，是顾景云虔诚祈祷的神灵，年初一到初五各种的祭祀，如今可都作古了：“天公，这种玩笑开不得！你已经要了孩子的眼睛，要了她的声音，为何连亲人也不放过呢。”</p><p>静姝几乎失去了所有，但只要顾景云还在，她就只能是“几乎”。</p><p>静婆婆去世后，所有的仪式、手续都是由这两个孩子在打理，老人真的凄惨没有一个亲生的人替她送终，但静琬琰婆婆是幸运的，因为她收获了两个照顾她后生的孩子。</p><p>新办来的户口本只有静姝独自为户主，婆婆那页不见了，空荡荡的本子没有往日的珍贵，旧的那本还在，奉为了孩子的珍宝。</p><p>顾景云后来的七日陪着孩子辗转，她还不到十四岁，不能再一个人守着空荡荡的屋子，谁都放心不下，最后静安中学的腾出了一间宿舍给了女孩，从此留守校园。</p><p>当老家的门把横上，木檐终于是时候回到滴漏无人听的日子，鸡鸭都赶去了镇上卖尽，所有的推车、木桶花筛，手工编织的帘幕、花饰品，一罐罐陈酿的佳肴都无知音赏饮。柴米油盐酱醋茶，琴棋书画诗酒花，顾景云陪静姝的东西都将埋没的老屋里。此后山月不再拜访院中人的故事，水风空落、院前花惜无人赏。</p><p>拾起旧裳，到校舍过一个人的生活，此后的一日三晨不用再自己动手，班里也没人会去欺负静姝，他们更加照顾她。最终静姝语数外三门课程的考试成绩均是满分，因为农村户籍的缘故，在城市中念公办学校很贵，于是顾景云给静姝寻了间私立中学。为了方便照顾静姝，顾景云放弃了校内实惠的宿舍，转而到校外租房子上学。</p><p>静姝做过一个梦，梦里婆婆告诉她之前的那些都是假的。梦里她能说话，她念了很多遍婆婆的名字，边念边哭在婆婆怀里。静姝发誓一定做一个乖孩子，听婆婆话，不调皮。婆婆搂着她，承诺永远也不会离开她。</p><p>后来天亮了，婆婆没有回来，顾景云的衣服却湿了一大截，他也哭了。</p><p>“哥，你怎么哭了……”</p><p>那晚静姝会说话了，说很多幼稚的话，听得疼心，听得时间静止。</p><p>一个人能在什么时候长大，在辞别亲故时，在撕心裂肺中，在误会了世界、在遗忘了自己理想的时刻。</p><p>她是个十四岁的小姑娘，夜幕星辰下像是十六岁皎洁无暇的“不食人间烟火”。</p><h1 id="第十一章-第一卷完结（银河慷慨赐予我的蜜饯）"><a href="#第十一章-第一卷完结（银河慷慨赐予我的蜜饯）" class="headerlink" title="第十一章 第一卷完结（银河慷慨赐予我的蜜饯）"></a>第十一章 第一卷完结（银河慷慨赐予我的蜜饯）</h1><p>中秋的时候，山头蒙上一头纱盖，当日相流到山脚，野草都爬起来伸个懒腰。静屋的主人才走了几个月，门前已是芳草萋萋，像刻意插茱萸、采野菊、折杨柳，想必静琬琰还在这乘凉给它们讲老伴和儿子的故事罢。</p><p>这天旧屋重开，陈器漂洗，顾景云和静姝回故里看“婆婆”了。</p><p>月饼的风味不一，突然觉得从小到大斗排斥的“五仁”竟香了起来。月饼或许不好说出其中不同，但如果是冬至，北方吃的水饺，南方更爱汤圆，团团圆圆。烧一锅沸水，溜滚下这晶莹的白绿紫墨。</p><p>大概人是离别久了才会生情吧，从来没有离开过家的孩子哪里能深刻体会到“家”的味道。</p><p>坐谷坡，摇曳摆裙下的山花草木，溪水潺潺，跟顾景云比比谁编的花圈快。静姝自然是第一，那双苞茧的小手举高抖在顾景云额上，说道：“景云，等我长大了那天，你可以娶我吗？”<br>……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;涉及到版权的缘故，书名以及内容都作了修改，均是段落，也就是随便截取一段放上来存档而已。&lt;/p&gt;
&lt;h1 id=&quot;第九章-全世界都趁我不在，亏
      
    
    </summary>
    
    
    
      <category term="小说" scheme="http://yan_han_guang.gitee.io/tags/%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="眼" scheme="http://yan_han_guang.gitee.io/tags/%E7%9C%BC/"/>
    
  </entry>
  
  <entry>
    <title>关于站长</title>
    <link href="http://yan_han_guang.gitee.io/2020/04/08/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
    <id>http://yan_han_guang.gitee.io/2020/04/08/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/</id>
    <published>2020-04-08T07:32:32.000Z</published>
    <updated>2020-06-06T12:51:47.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这里只是简单写点自我介绍"><a href="#这里只是简单写点自我介绍" class="headerlink" title="这里只是简单写点自我介绍"></a>这里只是简单写点自我介绍</h1><ul><li>除了“码农”的身份我还有和“作家”的工作，所以我在各个平台的更新频率比较低哈~</li><li>所学专业：目前本科在读计算机</li><li>B站昵称：雨落弦鸣</li><li>笔名（保密）</li><li>工作经验：某当签约网络作家、舞蹈教员</li><li>特长：大多数体育类项目，舞蹈。</li><li>爱好：钢琴、绘画、美工设计、影视制作、古风</li><li>喜欢的音乐：《穿越时空的思念》等轻音乐、《霜雪千年》等古风歌曲。</li><li>喜欢的舞种：中国舞、breaking</li><li>喜欢的动画影视剧：《仙剑奇侠传三》、《犬夜叉》、《欢乐颂》、《侠肝义胆沈剑心》、《爱情公寓一二三四》等。</li><li>喜欢的音乐人：十指流玉、羽肿、久石让、July、Bandari、等什么君、双笙、周杰伦等。</li><li>喜欢的书籍类型：历史典籍、文学名著。</li><li>理想的生活：听钢琴曲，享轻音乐，在案头写故事。抬眼时，庭前花开花落，天空云卷云舒。饿时就上街带一小肉，分予我还有我的小猫咪们。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;这里只是简单写点自我介绍&quot;&gt;&lt;a href=&quot;#这里只是简单写点自我介绍&quot; class=&quot;headerlink&quot; title=&quot;这里只是简单写点自我介绍&quot;&gt;&lt;/a&gt;这里只是简单写点自我介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;除了“码农”的身份我还有和“作家”的工作，所以我
      
    
    </summary>
    
    
    
      <category term="自我介绍" scheme="http://yan_han_guang.gitee.io/tags/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>最快速地搭建炫丽的个人网站or博客</title>
    <link href="http://yan_han_guang.gitee.io/2020/04/08/%E6%9C%80%E5%BF%AB%E9%80%9F%E5%9C%B0%E6%90%AD%E5%BB%BA%E7%82%AB%E4%B8%BD%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99or%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yan_han_guang.gitee.io/2020/04/08/%E6%9C%80%E5%BF%AB%E9%80%9F%E5%9C%B0%E6%90%AD%E5%BB%BA%E7%82%AB%E4%B8%BD%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99or%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-04-08T06:55:39.000Z</published>
    <updated>2020-04-12T10:51:01.243Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>为什么希望你们都有个人网站呢，好处真的太多了，说句最实在的，你的个人网站也可以在你面试公司的时候加分，何乐而不为。</code></pre><h1 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h1><h2 id="视频教程地址：B站视频地址"><a href="#视频教程地址：B站视频地址" class="headerlink" title="视频教程地址：B站视频地址"></a>视频教程地址：<a href="https://www.bilibili.com/video/BV1je41147Ma/" target="_blank" rel="noopener">B站视频地址</a></h2><h2 id="1-nodejs，Git环境搭建："><a href="#1-nodejs，Git环境搭建：" class="headerlink" title="1.nodejs，Git环境搭建："></a>1.nodejs，Git环境搭建：</h2><ul><li><p><a href="https://blog.csdn.net/qq_43285335/article/details/90696126" target="_blank" rel="noopener">nodejs搭建教程:</a></p></li><li><p>注意了，像Git这种服务器在国外的东西，它的官网下载这个软件会非常慢，建议直接在百度上搜索git下载与安装，各种软件园都能直接快速下载，留一下版本最好不要太旧就行。</p></li><li><p><a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html" target="_blank" rel="noopener">git搭建教程：</a></p></li><li><p><a href="https://jingyan.baidu.com/article/e8cdb32b0ce12137042bad51.html" target="_blank" rel="noopener">补充参考文档（可能你会用到）：</a></p></li><li><p><a href="https://www.cnblogs.com/luyuandatabase/p/12145707.html" target="_blank" rel="noopener">配置淘宝云</a></p><h2 id="2-注册GitHub账号并创建仓库"><a href="#2-注册GitHub账号并创建仓库" class="headerlink" title="2.注册GitHub账号并创建仓库"></a>2.注册GitHub账号并创建仓库</h2><ol><li>注册就不用我说了，创建仓库视频里有，然后这个也很简单，不会就百度（应该没人去百度的，太简单了）</li><li>格式要求：gfyuan.github.io</li><li>下面两个东西选其一我在视频里面没有演示，因为我早已经弄好了，你们看着弄。</li><li><a href="https://www.xuanfengge.com/using-ssh-key-link-github-photo-tour.html" target="_blank" rel="noopener">参考文档（可能用到）——GitHub的ssh密匙添加：</a></li><li><a href="https://www.jianshu.com/p/3f4b2ede5a93" target="_blank" rel="noopener">参考文档（可能用到）——Gitee的ssh密匙添加：</a></li></ol><h2 id="3-快速利用hexo搭建博客："><a href="#3-快速利用hexo搭建博客：" class="headerlink" title="3.快速利用hexo搭建博客："></a>3.快速利用hexo搭建博客：</h2><ol><li><a href="https://hexoscript.gitbook.io/hexo-script/" target="_blank" rel="noopener">脚本教程</a></li><li><a href="https://blog.csdn.net/jspnetcn/article/details/104111651" target="_blank" rel="noopener">matery主题安装及优化</a></li></ol></li></ul><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">matery主题官网：</a></p><h2 id="博客搭建完成"><a href="#博客搭建完成" class="headerlink" title="博客搭建完成"></a>博客搭建完成</h2><p><a href="https://rika0-0.github.io/">我的博客</a></p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>自行下载</li><li>vs code</li></ul><h2 id="需要的编辑软件"><a href="#需要的编辑软件" class="headerlink" title="需要的编辑软件"></a>需要的编辑软件</h2><ul><li>Typora<br>个人建议在国内的网站上面下载，不要去官网，下载慢</li><li>VS code<br>轻量级文档编辑器</li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p> <img src="https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1586329259&di=4b52fb528ca0962c5b80fef165441db4&src=http://image.cilacila.com/uploads/20190112/21/1547301428-yHBpuVbPFO.jpg" alt=""></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p> <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VScode下载地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;为什么希望你们都有个人网站呢，好处真的太多了，说句最实在的，你的个人网站也可以在你面试公司的时候加分，何乐而不为。&lt;/cod
      
    
    </summary>
    
    
    
      <category term="web" scheme="http://yan_han_guang.gitee.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>算法精要总复习（updating）</title>
    <link href="http://yan_han_guang.gitee.io/2020/04/06/%E7%AE%97%E6%B3%95%E7%B2%BE%E8%A6%81%E6%80%BB%E5%A4%8D%E4%B9%A0updating/"/>
    <id>http://yan_han_guang.gitee.io/2020/04/06/%E7%AE%97%E6%B3%95%E7%B2%BE%E8%A6%81%E6%80%BB%E5%A4%8D%E4%B9%A0updating/</id>
    <published>2020-04-06T15:01:39.000Z</published>
    <updated>2020-04-12T10:51:11.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="算法的复杂性分析"><a href="#算法的复杂性分析" class="headerlink" title="算法的复杂性分析"></a>算法的复杂性分析</h2><h3 id="时间复杂性"><a href="#时间复杂性" class="headerlink" title="时间复杂性"></a>时间复杂性</h3><ul><li>在进行算法分析时，语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T(n)= O(f(n))。它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数。<br>用大写O()来体现算法时间复杂度的记法，我们称之为大O记法。<br>一般情况下，随着输入规模n的增大，T(n)增长最慢的算法为最优算法。</li></ul><ol><li>推导大O阶方法   </li></ol><p>如何分析一个算法的时间复杂度呢？即如何推导大O阶呢？  </p><p>用常数1取代运行时间中的所有加法常数。  </p><p>在修改后的运行次数函数中，只保留最高阶项。 </p><p>如果最高阶项存在且不是1，则去除与这个项相乘的常数。 </p><p>得到的最后结果就是大O阶。</p><h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><ul><li><p>常数阶</p><pre class=" language-c++"><code class="language-c++">int sum = 0, n = 100;printf(“I love you.com\n”);printf(“I love you.com\n”);printf(“I love you.com\n”);printf(“I love you.com\n”);printf(“I love you.com\n”);printf(“I love you.com\n”);sum = (1+n)*n/2;</code></pre><p>第一条就说明了所有加法常数给他个O(1)即可</p></li><li><p>线性阶   </p></li></ul><p>一般含有非嵌套循环涉及线性阶，线性阶就是随着问题规模n的扩大，对应计算次数呈直线增长.<br>这段代码，它的循环的时间复杂度为O(n)，因为循环体中的代码需要执行n次。</p><pre class=" language-c++"><code class="language-c++">int i , n = 100, sum = 0;for( i=0; i < n; i++ ){    sum = sum + i;}</code></pre><ul><li>平方阶<br>n等于100，也就是说外层循环每执行一次，内层循环就执行100次，那总共程序想要从这两个循环出来，需要执行100*100次，也就是n的平方。所以这段代码的时间复杂度为O(n^2)。<pre class=" language-c++"><code class="language-c++">int i, j, n = 100;for( i=0; i < n; i++ ){  for( j=0; j < n; j++ )  {      printf(“I love FishC.com\n”);  }}</code></pre></li><li>对数阶<br>由于每次i*2之后，就距离n更近一步，假设有x个2相乘后大于或等于n，则会退出循环。<br>于是由2^x = n得到x = log(2)n，所以这个循环的时间复杂度为O(logn)。<pre class=" language-c++"><code class="language-c++">int i = 1, n = 100;while( i < n ){  i = i * 2;}</code></pre></li><li>函数调用的时间复杂度分析<br><img src="https://upload-images.jianshu.io/upload_images/4807654-9d3b7f58b405a618.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/659/format/webp" alt=""></li></ul><h3 id="空间复杂性"><a href="#空间复杂性" class="headerlink" title="空间复杂性"></a>空间复杂性</h3><ul><li>算法的空间复杂度通过计算算法所需的存储空间实现，算法的空间复杂度的计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。  </li><li>通常，我们都是用“时间复杂度”来指运行时间的需求，是用“空间复杂度”指空间需求。<br>当直接要让我们求“复杂度”时，通常指的是时间复杂度。<br>显然对时间复杂度的追求更是属于算法的潮流！<h3 id="渐近分析中的5个符号"><a href="#渐近分析中的5个符号" class="headerlink" title="渐近分析中的5个符号"></a>渐近分析中的5个符号</h3></li><li>渐近精确界记号：ΘΘ（big-theta）</li><li>渐近上界记号：OO(big-oh)</li><li>渐近下界记号：ΩΩ(big-omege)</li><li>非渐近紧确上界：o(小-oh)</li><li>非渐近紧确下界：ω(小-omege)<h1 id="第二章-递归与分治策略"><a href="#第二章-递归与分治策略" class="headerlink" title="第二章 递归与分治策略"></a>第二章 递归与分治策略</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h1&gt;&lt;h2 id=&quot;算法的复杂性分析&quot;&gt;&lt;a href=&quot;#算法的复杂性分析&quot; class=&quot;headerlink&quot; title=&quot;算法的复杂
      
    
    </summary>
    
    
    
      <category term="算法" scheme="http://yan_han_guang.gitee.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
